summary(model_1)
# Extract coefficients and cutoffs
lambda1 <- model_1$coefficients  # Estimate for s
theta1 <- model_1$zeta  # Cutoff points
# Compute S_N (Thresholds for s)
S_N1 <- exp(theta1)  # Since there is only one predictor, no need for mean adjustment
# Create labels for S_N
upperb1 <- length(theta1)  # Number of thresholds
slab1 <- paste0("$S_", 1:upperb1, "$")
names(S_N1) <- slab1
# Compute ETR_N using the cutoffs
ETR_N1 <- exp(theta1[2:upperb1] - theta1[1:(upperb1-1)]) * (1:(upperb1-1)) / (2:upperb1)
# Create labels for ETR_N
elab1 <- paste0("$s_", 2:upperb1, "/s_", 1:(upperb1-1), "$")
names(ETR_N1) <- elab1
# Print results
S_N1
ETR_N1
kable(S_N1, col.names = c("'000s"), digits = 4,
caption = 'Entry thresholds',
booktabs = TRUE)
# Display the results in a table
kable(S_N1, col.names = c("'000s"), digits = 4,
caption = 'Entry thresholds',
booktabs = TRUE)
# Optionally, display the ETR_N3 in a table as well
kable(ETR_N1, col.names = c("ETR"), digits = 4,
caption = 'Entry Threshold Ratios',
booktabs = TRUE)
stargazer(ETR_N1, type = "text")
# Fit the model with one predictor
model_2 <- polr(Number_of_stores ~ log_s, data = br_data, method = "probit")
# Display the summary of the model
summary(model_2)
# Extract coefficients and cutoffs
lambda2 <- model_2$coefficients # Estimate for log_s
theta2 <- model_2$zeta # Cutoffs
# Compute S_N using the predictor log_s
# Since there's only one predictor, use its mean directly
S_N2 <- exp(theta2 - mean(br_data$log_s) * lambda2["log_s"])
# Create labels for S_N
upperb2 <- length(theta2) # Number of thresholds
slab2 <- paste0("$S_", 1:upperb2, "$")
names(S_N2) <- slab2
# Compute ETR_N using the cutoffs
ETR_N2 <- exp(theta2[2:upperb2] - theta2[1:(upperb2-1)]) * (1:(upperb2-1)) / (2:upperb2)
# Create labels for ETR_N
elab2 <- paste0("$s_", 2:upperb2, "/s_", 1:(upperb2-1), "$")
names(ETR_N2) <- elab2
# Print results
S_N2
ETR_N2
# Display the results in a table
knitr::kable(S_N2, col.names = c("'000s"), digits = 4,
caption = 'Entry thresholds for Model 2',
booktabs = TRUE)
# Optionally, display the ETR_N2 in a table as well
knitr::kable(ETR_N2, col.names = c("ETR"), digits = 4,
caption = 'Entry Threshold Ratios for Model 2',
booktabs = TRUE)
## Model 3
# Fit the model with the specified predictors
model_3 <- polr(Number_of_stores ~ log_s + Monthly_salary + Grensehandel + n_stays,
data = br_data, method = "probit")
# Display the summary of the model
summary(model_3)
# Extract coefficients and cutoffs
lambda3 <- model_3$coefficients # Estimates for log_s, Monthly_salary, Grensehandel, and n_stays
theta3 <- model_3$zeta # Cutoffs
# Compute S_N using the sample means of all predictors
X_bar3 <- colMeans(br_data[, c("log_s", "Monthly_salary", "Grensehandel", "n_stays")])
S_N3 <- exp(theta3 - X_bar3 %*% lambda3)
# Create labels for S_N
upperb3 <- length(theta3) # Number of thresholds
slab3 <- paste0("$S_", 1:upperb3, "$")
names(S_N3) <- slab3
# Compute ETR_N using the cutoffs
ETR_N3 <- exp(theta3[2:upperb3] - theta3[1:(upperb3-1)]) * (1:(upperb3-1)) / (2:upperb3)
# Create labels for ETR_N
elab3 <- paste0("$s_", 2:upperb3, "/s_", 1:(upperb3-1), "$")
names(ETR_N3) <- elab3
# Display the results in a table
knitr::kable(S_N3, col.names = c("'000s"), digits = 4,
caption = 'Entry thresholds for Model 3',
booktabs = TRUE)
# Optionally, display the ETR_N3 in a table as well
knitr::kable(ETR_N3, col.names = c("ETR"), digits = 4,
caption = 'Entry Threshold Ratios for Model 3',
booktabs = TRUE)
# Fit the model with the specified predictors
model_4 <- polr(Number_of_stores ~ log_s + Monthly_salary + Grensehandel + n_stays + Dist_nearest,
data = br_data, method = "probit")
# Fit the model with the specified predictors
model_5 <- polr(Number_of_stores ~ log_s + Area,
data = br_data, method = "probit")
# Display the summary of the model
summary(model_5)
## Model 5
# Fit the model with the specified predictors
model_5 <- polr(Number_of_stores ~ log_s + Area, data = br_data, method = "probit")
# Display the summary of the model
summary(model_5)
# Extract coefficients and cutoffs
lambda5 <- model_5$coefficients # Estimates for log_s and Area
theta5 <- model_5$zeta # Cutoffs
# Compute S_N using the sample means of the predictors
X_bar5 <- colMeans(br_data[, c("log_s", "Area")])
S_N5 <- exp(theta5 - X_bar5 %*% lambda5)
# Create labels for S_N
upperb5 <- length(theta5) # Number of thresholds
slab5 <- paste0("$S_", 1:upperb5, "$")
names(S_N5) <- slab5
# Compute ETR_N using the cutoffs
ETR_N5 <- exp(theta5[2:upperb5] - theta5[1:(upperb5-1)]) * (1:(upperb5-1)) / (2:upperb5)
# Create labels for ETR_N
elab5 <- paste0("$s_", 2:upperb5, "/s_", 1:(upperb5-1), "$")
names(ETR_N5) <- elab5
# Print results
S_N5
ETR_N5
# Display the results in a table
knitr::kable(S_N5, col.names = c("'000s"), digits = 4,
caption = 'Entry thresholds for Model 5',
booktabs = TRUE)
# Optionally, display the ETR_N5 in a table as well
knitr::kable(ETR_N5, col.names = c("ETR"), digits = 4,
caption = 'Entry Threshold Ratios for Model 5',
booktabs = TRUE)
# Fit the model with the specified predictors
model_5 <- polr(Number_of_stores ~ log_s + n_stays, data = br_data, method = "probit")
# Display the summary of the model
summary(model_5)
## Model 5
# Fit the model with the specified predictors
model_5 <- polr(Number_of_stores ~ log_s + n_stays, data = br_data, method = "probit")
# Display the summary of the model
summary(model_5)
# Extract coefficients and cutoffs
lambda5 <- model_5$coefficients # Estimates for log_s and Area
theta5 <- model_5$zeta # Cutoffs
# Compute S_N using the sample means of the predictors
X_bar5 <- colMeans(br_data[, c("log_s", "n_stays")])
S_N5 <- exp(theta5 - X_bar5 %*% lambda5)
# Create labels for S_N
upperb5 <- length(theta5) # Number of thresholds
slab5 <- paste0("$S_", 1:upperb5, "$")
names(S_N5) <- slab5
# Compute ETR_N using the cutoffs
ETR_N5 <- exp(theta5[2:upperb5] - theta5[1:(upperb5-1)]) * (1:(upperb5-1)) / (2:upperb5)
# Create labels for ETR_N
elab5 <- paste0("$s_", 2:upperb5, "/s_", 1:(upperb5-1), "$")
names(ETR_N5) <- elab5
# Print results
S_N5
ETR_N5
# Display the results in a table
knitr::kable(S_N5, col.names = c("'000s"), digits = 4,
caption = 'Entry thresholds for Model 5',
booktabs = TRUE)
# Optionally, display the ETR_N5 in a table as well
knitr::kable(ETR_N5, col.names = c("ETR"), digits = 4,
caption = 'Entry Threshold Ratios for Model 5',
booktabs = TRUE)
View(br_data)
# Filtering data for B&R
br_data <- Vinmonopolet_market %>%
filter(Population < 100000 & Area > 0 & Population > 0)
## Model 3
# Fit the model with the specified predictors
model_3 <- polr(Number_of_stores ~ log_s + Monthly_salary + Grensehandel + n_stays,
data = br_data, method = "probit")
# Fit the model with the specified predictors
model_3 <- polr(Number_of_stores ~ log_s + Monthly_salary + Grensehandel + n_stays,
data = br_data, method = "probit")
View(br_data)
# relevant libraries
library(tidyverse)
library(readxl)
library(fastDummies)
library(knitr)
library(stargazer)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Load data
Vinmonopolet_market <- read_excel("B&R_data.xlsx")
# Calculate rho, the raw correlation between Population and number of stores
rho <- cor(Vinmonopolet_market$Population, Vinmonopolet_market$Number_of_stores)
## Data preparation ############################################################
# Filtering data for B&R
br_data <- Vinmonopolet_market %>%
filter(Population < 100000 & Area > 0 & Population > 0)
# Adding variables to the data
upperb <- 3
br_data <- br_data %>%
mutate(
s = Population / 1000,
log_s = log(s),
density = Number_of_stores / Area,
Number_of_stores = as.factor(ifelse(Number_of_stores <= upperb, Number_of_stores, upperb))
) %>%
dummy_cols(select_columns = "Number_of_stores") %>%
mutate_at(vars(starts_with("Number_of_stores")), as.factor)
# Scale the numeric variables
br_data <- br_data %>%
mutate_at(vars(Population, s, log_s, Area, Grensehandel, n_stays, Monthly_salary, Dist_nearest), scale)
# Correlation matrix
cor(br_data[, c("s", "log_s", "Area", "Grensehandel", "n_stays", "Monthly_salary", "Dist_nearest")])
## Some interesting statistics ################################################
# These justify adding the variables to the data
# Table of the number of stores per market
table(br_data$Number_of_stores)
# Consumption per capita, grouped by region
Vinmonopolet_market %>%
group_by(Region_Name) %>%
summarise(
consumption = sum(Sales) / sum(Population),
Sales = sum(Sales)
) %>%
arrange(desc(consumption))
# Library necessary for the polr function.
# select() does not work after this is loaded
library(MASS)
# Fit the model with the specified predictors
model_3 <- polr(Number_of_stores ~ log_s + Monthly_salary + Grensehandel + n_stays,
data = br_data, method = "probit")
# Display the summary of the model
summary(model_3)
# Extract coefficients and cutoffs
lambda3 <- model_3$coefficients # Estimates for log_s, Monthly_salary, Grensehandel, and n_stays
theta3 <- model_3$zeta # Cutoffs
# Compute S_N using the sample means of all predictors
X_bar3 <- colMeans(br_data[, c("log_s", "Monthly_salary", "Grensehandel", "n_stays")])
S_N3 <- exp(theta3 - X_bar3 %*% lambda3)
# Create labels for S_N
upperb3 <- length(theta3) # Number of thresholds
slab3 <- paste0("$S_", 1:upperb3, "$")
names(S_N3) <- slab3
# Compute ETR_N using the cutoffs
ETR_N3 <- exp(theta3[2:upperb3] - theta3[1:(upperb3-1)]) * (1:(upperb3-1)) / (2:upperb3)
# Create labels for ETR_N
elab3 <- paste0("$s_", 2:upperb3, "/s_", 1:(upperb3-1), "$")
names(ETR_N3) <- elab3
# Display the results in a table
knitr::kable(S_N3, col.names = c("'000s"), digits = 4,
caption = 'Entry thresholds for Model 3',
booktabs = TRUE)
# Optionally, display the ETR_N3 in a table as well
knitr::kable(ETR_N3, col.names = c("ETR"), digits = 4,
caption = 'Entry Threshold Ratios for Model 3',
booktabs = TRUE)
# Filtering data for B&R
br_data <- Vinmonopolet_market %>%
filter(Population < 50000 & Area > 0 & Population > 0)
### Independent variables merge ###
# relevant libraries
library(tidyverse)
library(readxl)
library(fastDummies)
library(knitr)
library(writexl)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Load data
Vinmonopolet <- read_excel("final_data_mun_dist.xlsx") %>%
select(-c(Store_ID, Store_Status, Postal_Code, Poststed,
PostnummerKategoriKode, PostnummerKategori, Region_Code,
Municipality_Name)) %>%
mutate(
Municipality_Name = Mun_name,
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "AKERSHUS" ~ "Akershus",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "BUSKERUD" ~ "Buskerud",
Region_Name == "VESTFOLD" ~ "Vestfold",
Region_Name == "FINNMARK" ~ "Finnmark",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "MCRE OG ROMSDAL" ~ "MC8re og Romsdal",
Region_Name == "NORDLAND" ~ "Nordland",
Region_Name == "OSLO" ~ "Oslo",
Region_Name == "ROGALAND" ~ "Rogaland",
Region_Name == "TELEMARK" ~ "Telemark",
Region_Name == "TROMS" ~ "Troms",
Region_Name == "SCR-TRCNDELAG" ~ "TrC8ndelag",
Region_Name == "NORD-TRCNDELAG" ~ "TrC8ndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
Region_Name == "CSTFOLD" ~ "Cstfold",
is.na(Region_Name) & str_starts(Municipality_Code, "03") ~ "Oslo",
is.na(Region_Name) & str_starts(Municipality_Code, "11") ~ "Rogaland",
is.na(Region_Name) & str_starts(Municipality_Code, "15") ~ "MC8re og Romsdal",
is.na(Region_Name) & str_starts(Municipality_Code, "18") ~ "Nordland",
is.na(Region_Name) & str_starts(Municipality_Code, "31") ~ "Cstfold",
is.na(Region_Name) & str_starts(Municipality_Code, "32") ~ "Akershus",
is.na(Region_Name) & str_starts(Municipality_Code, "33") ~ "Buskerud",
is.na(Region_Name) & str_starts(Municipality_Code, "34") ~ "Innlandet",
is.na(Region_Name) & str_starts(Municipality_Code, "39") ~ "Vestfold",
is.na(Region_Name) & str_starts(Municipality_Code, "40") ~ "Telemark",
is.na(Region_Name) & str_starts(Municipality_Code, "42") ~ "Agder",
is.na(Region_Name) & str_starts(Municipality_Code, "46") ~ "Vestland",
is.na(Region_Name) & str_starts(Municipality_Code, "50") ~ "TrC8ndelag",
is.na(Region_Name) & str_starts(Municipality_Code, "55") ~ "Troms",
is.na(Region_Name) & str_starts(Municipality_Code, "56") ~ "Finnmark",
TRUE ~ Region_Name  # Keep existing Region_Name if no conditions are met
)
) %>%
select(-Mun_name)
# Aggregating per market data for the Bresnahan & Reiss model
Vinmonopolet_market <- Vinmonopolet %>%
group_by(Municipality_Code) %>%
summarise(
Mun_name = first(Municipality_Name),
Region_Name = first(Region_Name),
Population = first(Population),
Area = first(Area),
Number_of_stores = sum(`2024` > 0),  # Count non-zero sales
Sales = sum(`2024`),
Lat = first(Latitude),
Lon = first(Longitude),
Dist_nearest = first(dist_nearest_store),
)
# Now we have loaded the main data set that we thus far have used for estimating a model
# We saw the need for more data to be able to estimate the Bresnahan & Reiss model
## Merge 1: Grensehandel ######################################################
# Load the weights datas
weights <- read_excel("Grensehandel_weights.xlsx", skip = 3) %>%
slice(1) %>%
select(-'...1') %>%
mutate(
mean_weight = (as.numeric(`2024K1`) + as.numeric(`2024K2`) + as.numeric(`2024K3`) + as.numeric(`2024K4`)) / 4
)
weight_grensehandel <- weights$mean_weight / 100
# Load the regional data
regional <- read_excel("Grensehandel_regions.xlsx")
total_grensehandel <- sum(regional$"2024")
# Calculate grensehandel per region
regional <- regional %>%
rename(
Region = `Fylker`,
Total_sale = `2024`
) %>%
mutate(
Grensehandel = Total_sale * weight_grensehandel
)
# Split the "Vestlandet" region row into three new rows: "Rogaland", "Vestland" and "MC8re og Romsdal"
regional <- regional %>%
rbind(
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Rogaland"),
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Vestland"),
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "MC8re og Romsdal")
) %>%
filter(Region != "Vestlandet")
# Divide the grensehandel value by three for "Rogaland", "Vestland" and "MC8re og Romsdal"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Rogaland" ~ Grensehandel * 0.35,
Region == "Vestland" ~ Grensehandel * 0.46,
Region == "MC8re og Romsdal" ~ Grensehandel * 0.19,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Split the "Nord-Norge" region row into three new rows: "Nordland", "Troms" and "Finnmark"
# And divide the grensehandel value by three
regional <- regional %>%
mutate(
Grensehandel = ifelse(Region == "Nord-Norge", Grensehandel / 3, Grensehandel)
) %>%
rbind(
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Nordland"),
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Troms"),
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Finnmark")
) %>%
filter(Region != "Nord-Norge")
# Divide the grensehandel value by three for "Nordland", "Troms" and "Finnmark"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Nordland" ~ Grensehandel * 0.5,
Region == "Troms" ~ Grensehandel * 0.35,
Region == "Finnmark" ~ Grensehandel * 0.15,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Split the "Agder, Telemark, Buskerud og Vestfold" column into four new columns: "Agder", "Telemark", "Buskerud" and "Vestfold"
# And divide the grensehandel value by four
regional <- regional %>%
mutate(
Grensehandel = ifelse(Region == "Agder, Telemark, Buskerud og Vestfold", Grensehandel / 4, Grensehandel)
) %>%
rbind(
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Agder"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Telemark"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Buskerud"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Vestfold")
) %>%
filter(Region != "Agder, Telemark, Buskerud og Vestfold")
# Divide the grensehandel value by four for "Agder", "Telemark", "Buskerud" and "Vestfold"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Agder" ~ Grensehandel * 0.31,
Region == "Telemark" ~ Grensehandel * 0.17,
Region == "Buskerud" ~ Grensehandel * 0.26,
Region == "Vestfold" ~ Grensehandel * 0.26,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Removing the "total_sale" column from the regional data set
regional <- regional %>% select(-Total_sale)
# Merge the regional data with the main data set on Region_Name in the Vinmonopolet_market data set and Region in the regional data set
Vinmonopolet_market <- left_join(Vinmonopolet_market, regional, by = c("Region_Name" = "Region"))
## Merge 2: Tourism ############################################################
# Reading tourism data
Tourism <- read_excel("Tourism.xlsx", skip = 4) %>%
rename(
Mun = '...1',
H = 'Hotell og liknande overnattingsbedrifter',
C = 'Campingplassar, hyttegrender og vandrarheim',
) %>%
select(-'...2') %>%
mutate_at(vars(H, C), ~as.numeric(str_replace_all(., ":", "0"))) %>%
mutate(n_stays = H + C) %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Mun", "H", "C", "Municipality_Name")) %>%
filter(!is.na(Municipality_Code))
# Merging the data
Vinmonopolet_market <- left_join(Vinmonopolet_market, Tourism, by = "Municipality_Code") %>%
mutate(
n_stays = ifelse(is.na(n_stays), 0, n_stays)
)
# There is a great deal of missing data, so we do not know the relevance of
# this data yet
## Merge 3: Income #############################################################
# Average monthly salary per inhabitant in the municipality
# Load data
data <- read_excel("Monthly_Salary.xlsx")
# Cleaning data by removing rows with missing values and rows with dots
clean_data <- data %>%
filter(!apply(., 1, function(row) any(grepl("\\.", row)))) %>%
na.omit()
# Remove the last two rows from the data, using tidyverse
clean_data <- clean_data %>%
slice(1:(n() - 2)) %>%
select(-'...2') %>%
rename(
Mun = `12852: Kommunefordelt mC%nedslC8nn, etter region, statistikkmC%l, statistikkvariabel, C%r og arbeidssted/bosted`,
Monthly_salary = '...3'
) %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Municipality_Name", "Mun")) %>%
mutate(Monthly_salary = as.numeric(Monthly_salary))
# Load data
concentration <- read_excel("Concentration.xlsx", skip = 3)
View(concentration)
# Load data
concentration <- read_excel("Concentration.xlsx", skip = 5)
View(concentration)
View(concentration)
View(concentration)
# Load data
concentration <- read_excel("Concentration.xlsx", skip = 5) %>%
slice(1:357)
View(concentration)
# Load data
concentration <- read_excel("Concentration.xlsx", skip = 5) %>%
slice(1:357) %>%
select('...1',
'Spredtbygd strøk...6') %>%
rename(Mun = '...1',
Concentration = 'Spredtbygd strøk...6')
View(concentration)
# Load data
concentration <- read_excel("Concentration.xlsx", skip = 5) %>%
slice(1:357) %>%
select('...1',
'Spredtbygd strøk...6') %>%
rename(Mun = '...1',
prop_spread = 'Spredtbygd strøk...6')
View(concentration)
# Load data
concentration <- read_excel("Concentration.xlsx", skip = 5) %>%
slice(1:357) %>%
select('...1',
'Spredtbygd strøk...6') %>%
rename(Mun = '...1',
prop_spread = 'Spredtbygd strøk...6') %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Municipality_Name", "Mun"))
View(concentration)
# Remove the first two characters of each cell in the "Municpality_Code" column
concentration$Municipality_Code <- substr(concentration$Municipality_Code, 3, nchar(concentration$Municipality_Code))
View(concentration)
# Load data
concentration <- read_excel("Concentration.xlsx", skip = 5) %>%
slice(1:357) %>%
select('...1',
'Spredtbygd strøk...6') %>%
rename(Mun = '...1',
prop_spread = 'Spredtbygd strøk...6') %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Municipality_Name", "Mun")) %>%
mutate(prop_spread = as.numeric(prop_spread))
# Remove the first two characters of each cell in the "Municpality_Code" column
concentration$Municipality_Code <- substr(concentration$Municipality_Code, 3, nchar(concentration$Municipality_Code))
View(concentration)
# Merge with the main data set
Vinmonopolet_market <- left_join(Vinmonopolet_market, concentration, by = "Municipality_Code")
View(Vinmonopolet_market)
# Write to Excel
write_xlsx(Vinmonopolet_market, "B&R_data.xlsx")
