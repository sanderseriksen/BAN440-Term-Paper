}
) %>%
ungroup() %>%
select(-new_val)
# Lagre den oppdaterte filen
write_xlsx(data_df, "final_data_17.xlsx")
# Laste inn nødvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data_17.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_18.xlsx")
# Rydde opp i kolonnenavnene ved å bruke de riktige kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte gamle kommunenummer (dersom flere gamle kommuner er adskilt med mellomrom)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Lage en oppslagsliste for gamle koder til nye koder (ensidig mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Oppdatere både Municipality_Code og Municipality_Name i data_df
data_df <- data_df %>%
rowwise() %>%
mutate(
new_val = if (Municipality_Code %in% names(kommune_mapping)) kommune_mapping[[Municipality_Code]] else NA_character_,
Municipality_Code = if (!is.na(new_val)) substr(new_val, 1, 4) else Municipality_Code,
Municipality_Name = if (!is.na(new_val)) str_trim(str_remove(new_val, "^[0-9]{4}\\s*-\\s*")) else Municipality_Name
) %>%
ungroup() %>%
select(-new_val)
# Lagre den oppdaterte filen
write_xlsx(data_df, "final_data_18.xlsx")
View(data_df)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data_18.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_20.xlsx")
# Laste inn nødvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data_18.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_20.xlsx")
# Rydde opp i kolonnenavnene ved å bruke de riktige kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte gamle kommunenummer (dersom flere gamle kommuner er adskilt med mellomrom)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Lage en oppslagsliste for gamle koder til nye koder (ensidig mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Oppdatere både Municipality_Code og Municipality_Name i data_df
data_df <- data_df %>%
rowwise() %>%
mutate(
new_val = if (Municipality_Code %in% names(kommune_mapping)) kommune_mapping[[Municipality_Code]] else NA_character_,
Municipality_Code = if (!is.na(new_val)) substr(new_val, 1, 4) else Municipality_Code,
Municipality_Name = if (!is.na(new_val)) str_trim(str_remove(new_val, "^[0-9]{4}\\s*-\\s*")) else Municipality_Name
) %>%
ungroup() %>%
select(-new_val)
# Lagre den oppdaterte filen
write_xlsx(data_df, "final_data_20.xlsx")
View(data_df)
# Laste inn kommuneendringer og oppdatert final data fra Excel
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
# Laste inn nødvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data_20.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
# Rydde opp i kolonnenavnene ved å bruke de riktige kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte gamle kommunenummer (dersom flere gamle kommuner er adskilt med mellomrom)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Lage en oppslagsliste for gamle koder til nye koder (ensidig mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Oppdatere både Municipality_Code og Municipality_Name i data_df
data_df <- data_df %>%
rowwise() %>%
mutate(
new_val = if (Municipality_Code %in% names(kommune_mapping)) kommune_mapping[[Municipality_Code]] else NA_character_,
Municipality_Code = if (!is.na(new_val)) substr(new_val, 1, 4) else Municipality_Code,
Municipality_Name = if (!is.na(new_val)) str_trim(str_remove(new_val, "^[0-9]{4}\\s*-\\s*")) else Municipality_Name
) %>%
ungroup() %>%
select(-new_val)
View(data_df)
View(kommuneendringer_df)
View(kommuneendringer_df)
kommune_mapping
View(kommuneendringer_df)
View(data_df)
# Laste inn nødvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data_20.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
# Rydde opp i kolonnenavnene ved å bruke de riktige kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte gamle kommunenummer (dersom flere gamle kommuner er adskilt med mellomrom)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Lage en oppslagsliste for gamle koder til nye koder (ensidig mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Oppdatere både Municipality_Code og Municipality_Name i data_df
data_df <- data_df %>%
rowwise() %>%
mutate(
new_val = if (Municipality_Code %in% names(kommune_mapping)) kommune_mapping[[Municipality_Code]] else NA_character_,
Municipality_Code = if (!is.na(new_val)) substr(new_val, 1, 4) else Municipality_Code,
Municipality_Name = if (!is.na(new_val)) str_trim(str_remove(new_val, "^[0-9]{4}\\s*-\\s*")) else Municipality_Name
) %>%
ungroup() %>%
select(-new_val)
# Lagre den oppdaterte filen
write_xlsx(data_df, "final_data_24.xlsx")
View(data_df)
# Laste inn nødvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data_20.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
# Laste inn nødvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data_20.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
# Rydde opp i kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte opp gamle kommunenummer og unneste slik at hver kode havner på egen rad.
kommuneendringer_df <- kommuneendringer_df %>%
mutate(Old_Codes = str_split(Old_Codes, " ")) %>%
unnest(Old_Codes) %>%
# Trekk ut de fire første sifrene (ren kommunekode)
mutate(Old_Code = substr(Old_Codes, 1, 4))
# Regn ut hvor mange ganger hver gammel kode opptrer
mapping_counts <- kommuneendringer_df %>%
group_by(Old_Code) %>%
summarise(count = n(), .groups = "drop")
# Slå sammen antallforing (count) med kommuneendringer_df
mapping_df <- kommuneendringer_df %>%
left_join(mapping_counts, by = "Old_Code")
# Nå oppdateres data_df ved å merge på den gamle kommunenummer-kolonnen.
# Vi oppdaterer bare dersom den gamle koden har en unik (count==1) mapping.
data_updated <- data_df %>%
left_join(mapping_df %>% select(Old_Code, New_Code, count),
by = c("Municipality_Code" = "Old_Code")) %>%
mutate(
Municipality_Code = if_else(!is.na(New_Code) & count == 1,
substr(New_Code, 1, 4),
Municipality_Code),
Municipality_Name = if_else(!is.na(New_Code) & count == 1,
# Fjern det ledende kommunenummeret og bindestreken slik at bare bokstavene (navnet) gjenstår
str_trim(str_remove(New_Code, "^[0-9]{4}\\s*-\\s*")),
Municipality_Name)
) %>%
select(-New_Code, -count)
View(data_updated)
# Laste inn nødvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data_20.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
# Rydde opp i kolonnenavnene ved å bruke de riktige kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte gamle kommunenummer (dersom flere gamle kommuner er adskilt med mellomrom)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Lage en oppslagsliste for gamle koder til nye koder (ensidig mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Oppdatere både Municipality_Code og Municipality_Name i data_df
data_df <- data_df %>%
rowwise() %>%
mutate(
new_val = if (Municipality_Code %in% names(kommune_mapping)) kommune_mapping[[Municipality_Code]] else NA_character_,
Municipality_Code = if (!is.na(new_val)) substr(new_val, 1, 4) else Municipality_Code,
Municipality_Name = if (!is.na(new_val)) str_trim(str_remove(new_val, "^[0-9]{4}\\s*-\\s*")) else Municipality_Name
) %>%
ungroup() %>%
select(-new_val)
View(data_df)
View(data_df)
# Laste inn nødvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data_20.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
# Rydde opp i kolonnenavnene ved å bruke de riktige kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte gamle kommunenummer (dersom flere gamle kommuner er adskilt med mellomrom)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Lage en oppslagsliste for gamle koder til nye koder (ensidig mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Oppdatere både Municipality_Code og Municipality_Name i data_df
data_df <- data_df %>%
rowwise() %>%
mutate(
new_val = if (Municipality_Code %in% names(kommune_mapping)) kommune_mapping[[Municipality_Code]] else NA_character_,
Municipality_Code = if (!is.na(new_val)) substr(new_val, 1, 4) else Municipality_Code,
Municipality_Name = if (!is.na(new_val)) str_trim(str_remove(new_val, "^[0-9]{4}\\s*-\\s*")) else Municipality_Name
) %>%
ungroup() %>%
select(-new_val)
View(data_df)
# Laste inn nødvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data_20.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
# Rydde opp i kolonnenavnene ved å bruke de riktige kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte gamle kommunenummer (dersom flere gamle kommuner er adskilt med mellomrom)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Lage en oppslagsliste for gamle koder til nye koder (ensidig mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code,
times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Oppdatere både Municipality_Code og Municipality_Name i data_df
data_df <- data_df %>%
rowwise() %>%
mutate(
new_val = if (Municipality_Code %in% names(kommune_mapping)) kommune_mapping[[Municipality_Code]] else NA_character_,
Municipality_Code = if (!is.na(new_val)) substr(new_val, 1, 4) else Municipality_Code,
Municipality_Name = if (!is.na(new_val)) str_trim(str_remove(new_val, "^[0-9]{4}\\s*-\\s*")) else Municipality_Name
) %>%
ungroup() %>%
select(-new_val)
# Hardkode rad 121 til at "Municipality_Code" blir 1580 og "Municipality_Name" blir Haram
data_df[121, "Municipality_Code"] <- "1580"
data_df[121, "Municipality_Name"] <- "Haram"
# Lagre den oppdaterte filen
write_xlsx(data_df, "final_data_24.xlsx")
View(data_df)
### Merging demography with the final data ###
# Loading necessary libraries
library(tidyverse)
library(readxl)
library(writexl)
# Loading the final data
final_data <- read_excel("final_data_24.xlsx")
# Transforming to normal characters
final_data$Municipality_Name <- iconv(final_data$Municipality_Name, from = "UTF-8", to = "ASCII//TRANSLIT")
final_data$Municipality_Name <- trimws(final_data$Municipality_Name)
# Standardize store names to improve matching
final_data <- final_data %>%
mutate(Municipality_Name = str_trim(str_to_lower(Municipality_Name)))  # Trim spaces and convert to lowercase
# Loading the kommune data
kommune_data <- read_excel("kommune_data_final.xlsx")
# Standardize the kommune data
kommune_data <- kommune_data %>%
mutate(Mun_name = iconv(Mun_name, from = "UTF-8", to = "ASCII//TRANSLIT"),
Mun_name = str_trim(str_to_lower(Mun_name)))  # Trim spaces and convert to lowercase
# Perform a full join to include all rows from both datasets
merged_data <- final_data %>%
full_join(kommune_data, by = c("Municipality_Code" = "Mun_num"))
View(merged_data)
merged_data <- merged_data %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
### Merging demography with the final data ###
# Loading necessary libraries
library(tidyverse)
library(readxl)
library(writexl)
# Loading the final data
final_data <- read_excel("final_data_24.xlsx")
# Transforming to normal characters
final_data$Municipality_Name <- iconv(final_data$Municipality_Name, from = "UTF-8", to = "ASCII//TRANSLIT")
final_data$Municipality_Name <- trimws(final_data$Municipality_Name)
# Standardize store names to improve matching
final_data <- final_data %>%
mutate(Municipality_Name = str_trim(str_to_lower(Municipality_Name)))  # Trim spaces and convert to lowercase
# Loading the kommune data
kommune_data <- read_excel("kommune_data_final.xlsx")
# Standardize the kommune data
kommune_data <- kommune_data %>%
mutate(Mun_name = iconv(Mun_name, from = "UTF-8", to = "ASCII//TRANSLIT"),
Mun_name = str_trim(str_to_lower(Mun_name)))  # Trim spaces and convert to lowercase
# Perform a full join to include all rows from both datasets
merged_data <- final_data %>%
full_join(kommune_data, by = c("Municipality_Code" = "Mun_num"))
# Replace NA values in store-related columns with 0
# Assuming 'Store_Info_Column' is the column in final_data that contains store information
# Replace 'Store_Info_Column' with the actual column names you want to fill with 0
merged_data <- merged_data %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
# If you have specific columns to replace NA with 0, you can specify them like this:
# merged_data <- merged_data %>%
#   mutate(Store_Info_Column = replace_na(Store_Info_Column, 0))
# Write the merged data to an Excel file
write_xlsx(merged_data, "final_data_mun.xlsx")
# relevant libraries
library(tidyverse)
library(readxl)
# Load data
raw_data <- read_excel("final_data_24.xlsx")
View(raw_data)
rm(raw_data)
# Load data
Vinmonopolet_raw <- read_excel("final_data_24.xlsx")
# Cleaning data
Vinmonopolet <- Vinmonopolet_raw %>%
select(-c(Store_ID, Store_Status, Postal_Code, GPS_Coordinates, Poststed,
PostnummerKategoriKode, PostnummerKategori))
View(Vinmonopolet)
# Unique values for Region_name
unique(Vinmonopolet$Region_name)
# Unique values for Region_name
unique(Vinmonopolet$Region_Name)
# Cleaning data
Vinmonopolet <- Vinmonopolet_raw %>%
select(-c(Store_ID, Store_Status, Postal_Code, GPS_Coordinates, Poststed,
PostnummerKategoriKode, PostnummerKategori)) %>%
mutate(
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "SØR-TRØNDELAG" ~ "Trøndelag",
Region_Name == "NORD-TRØNDELAG" ~ "Trøndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
)
)
View(Vinmonopolet)
# Cleaning data
Vinmonopolet <- Vinmonopolet_raw %>%
select(-c(Store_ID, Store_Status, Postal_Code, GPS_Coordinates, Poststed,
PostnummerKategoriKode, PostnummerKategori)) %>%
mutate(
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "AKERSHUS" ~ "Akershus",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "BUSKERUD" ~ "Buskerud",
Region_Name == "VESTFOLD" ~ "Vestfold",
Region_Name == "FINNMARK" ~ "Finnmark",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "MØRE OG ROMSDAL" ~ "Møre of Romsdal",
Region_Name == "NORDLAND" ~ "Nordland",
Region_Name == "OSLO" ~ "Oslo",
Region_Name == "ROGALAND" ~ "Rogaland",
Region_Name == "TELEMARK" ~ "Telemark",
Region_Name == "TROMS" ~ "Troms",
Region_Name == "SØR-TRØNDELAG" ~ "Trøndelag",
Region_Name == "NORD-TRØNDELAG" ~ "Trøndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
Region_Name == "ØSTFOLD" ~ "Østfold"
)
)
View(Vinmonopolet)
# Cleaning data
Vinmonopolet <- Vinmonopolet_raw %>%
select(-c(Store_ID, Store_Status, Postal_Code, GPS_Coordinates, Poststed,
PostnummerKategoriKode, PostnummerKategori, Region_Code)) %>%
mutate(
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "AKERSHUS" ~ "Akershus",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "BUSKERUD" ~ "Buskerud",
Region_Name == "VESTFOLD" ~ "Vestfold",
Region_Name == "FINNMARK" ~ "Finnmark",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "MØRE OG ROMSDAL" ~ "Møre of Romsdal",
Region_Name == "NORDLAND" ~ "Nordland",
Region_Name == "OSLO" ~ "Oslo",
Region_Name == "ROGALAND" ~ "Rogaland",
Region_Name == "TELEMARK" ~ "Telemark",
Region_Name == "TROMS" ~ "Troms",
Region_Name == "SØR-TRØNDELAG" ~ "Trøndelag",
Region_Name == "NORD-TRØNDELAG" ~ "Trøndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
Region_Name == "ØSTFOLD" ~ "Østfold"
)
)
View(Vinmonopolet)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
### Bresnahan & Reiss test document ###
# relevant libraries
library(tidyverse)
library(readxl)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Load data
Vinmonopolet_raw <- read_excel("final_data_24.xlsx")
# This data has a couple of unnecessart columns, so we will remove them
# Additionally, we will clean the data where necessary
# Cleaning data
Vinmonopolet <- Vinmonopolet_raw %>%
select(-c(Store_ID, Store_Status, Postal_Code, GPS_Coordinates, Poststed,
PostnummerKategoriKode, PostnummerKategori, Region_Code)) %>%
mutate(
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "AKERSHUS" ~ "Akershus",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "BUSKERUD" ~ "Buskerud",
Region_Name == "VESTFOLD" ~ "Vestfold",
Region_Name == "FINNMARK" ~ "Finnmark",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "MØRE OG ROMSDAL" ~ "Møre of Romsdal",
Region_Name == "NORDLAND" ~ "Nordland",
Region_Name == "OSLO" ~ "Oslo",
Region_Name == "ROGALAND" ~ "Rogaland",
Region_Name == "TELEMARK" ~ "Telemark",
Region_Name == "TROMS" ~ "Troms",
Region_Name == "SØR-TRØNDELAG" ~ "Trøndelag",
Region_Name == "NORD-TRØNDELAG" ~ "Trøndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
Region_Name == "ØSTFOLD" ~ "Østfold"
)
)
### Bresnahan & Reiss test document ###
# relevant libraries
library(tidyverse)
library(readxl)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Load data
Vinmonopolet_raw <- read_excel("final_data_mun.xlsx")
# This data has a couple of unnecessart columns, so we will remove them
# Additionally, we will clean the data where necessary
# Cleaning data
Vinmonopolet <- Vinmonopolet_raw %>%
select(-c(Store_ID, Store_Status, Postal_Code, GPS_Coordinates, Poststed,
PostnummerKategoriKode, PostnummerKategori, Region_Code)) %>%
mutate(
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "AKERSHUS" ~ "Akershus",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "BUSKERUD" ~ "Buskerud",
Region_Name == "VESTFOLD" ~ "Vestfold",
Region_Name == "FINNMARK" ~ "Finnmark",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "MØRE OG ROMSDAL" ~ "Møre of Romsdal",
Region_Name == "NORDLAND" ~ "Nordland",
Region_Name == "OSLO" ~ "Oslo",
Region_Name == "ROGALAND" ~ "Rogaland",
Region_Name == "TELEMARK" ~ "Telemark",
Region_Name == "TROMS" ~ "Troms",
Region_Name == "SØR-TRØNDELAG" ~ "Trøndelag",
Region_Name == "NORD-TRØNDELAG" ~ "Trøndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
Region_Name == "ØSTFOLD" ~ "Østfold"
)
)
View(Vinmonopolet)
View(Vinmonopolet_raw)
# Cleaning data
Vinmonopolet <- Vinmonopolet_raw %>%
select(-c(Store_ID, Store_Status, Postal_Code, GPS_Coordinates, Poststed,
PostnummerKategoriKode, PostnummerKategori, Region_Code, Mun_name)) %>%
mutate(
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "AKERSHUS" ~ "Akershus",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "BUSKERUD" ~ "Buskerud",
Region_Name == "VESTFOLD" ~ "Vestfold",
Region_Name == "FINNMARK" ~ "Finnmark",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "MØRE OG ROMSDAL" ~ "Møre of Romsdal",
Region_Name == "NORDLAND" ~ "Nordland",
Region_Name == "OSLO" ~ "Oslo",
Region_Name == "ROGALAND" ~ "Rogaland",
Region_Name == "TELEMARK" ~ "Telemark",
Region_Name == "TROMS" ~ "Troms",
Region_Name == "SØR-TRØNDELAG" ~ "Trøndelag",
Region_Name == "NORD-TRØNDELAG" ~ "Trøndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
Region_Name == "ØSTFOLD" ~ "Østfold"
)
)
View(Vinmonopolet)
