kk_1	V46_A=A_vrige_trekk_2	V47_A=A_vrige_trekk_3	V48_A=A_vrige_trekk_4	V49_A=A_vrige_trekk_5	V50_A=A_vrige_trekk_6	V51_A=A_vrige_trekk_7	V52_A=A_vrige_trekk_8	V53_A=A_vrige_trekk_9	V54_A=A_vrige_trekk_10	V55_A=A_vrige_trekk_11	V56_A=A_vrige_trekk_12	SELVKONT=Selvkontroll_1	V58_A=Selvkontroll_2_R	V59_A=Selvkontroll_3_R	V60_A=Selvkontroll_4_R	V61_A=Selvkontroll_5_R	V62_A=Selvkontroll_6	V63_A=Selvkontroll_7_R	V64_A=Selvkontroll_8	V65_A=Selvkontroll_9_R	V66_A=Selvkontroll_10_R	V67_A=Selvkontroll_11	V68_A=Selvkontroll_12_R	V69_A=Selvkontroll_13_R	S_VN_1=S_vn_1	S_VN_2=S_vn_2	S_VN_3=S_vn_3	S_VN_4=S_vn_4	S_VN_5=S_vn_5	S_VN_6=S_vn_6	FYSISK_U=Fysisk_utholdenhet	FYSISK_S=Fysisk_styrke	SOS_MEDI=Sos_medie_avhengig_1	V79_A=Sos_medie_avhengig_2	V80_A=Sos_medie_avhengig_3	V81_A=Sos_medie_avhengig_4	V82_A=Sos_medie_avhengig_5	V83_A=Sos_medie_avhengig_6	V84_A=Sos_medie_type	V85_A=Sos_medie_tidsbruk	COVID_BE=Covid_belastning_1	V87_A=Covid_belastning_2	V88_A=Covid_belastning_3	V89_A=Covid_belastning_4	V9
0_A=Covid_belastning_5	V91_A=Covid_belastning_6	V92_A=Covid_belastning_7	V93_A=Covid_belastning_8	Q75=Q75	KJ√òNN=Kj√∏nn	ALDER_1=Alder_1	STUDIEST=Studiested	KARAKTER=Karaktersnitt	TAR_LYKK=Tar_lykkekurset	FORELDRE=Foreldre_utdanning	DV_LYKKE=DV_Lykke	IV1_AUTO=IV1_Autonomi	IV2_SOSI=IV2_Sosial_Tilh√∏righet	IV3_KOMP=IV3_Kompetanse	IV4_STRE=IV4_Stress	IV5_SELV=IV5_Selvmedf√∏lelse	IV6_TAKK=IV6_Takknemlighet	IV7_GENE=IV7_Gener√∏sitet	IV8_TILL=IV8_Tillit	IV9_FRI=IV9_Fri_Vilje	IV10_OPT=IV10_Optimisme	IV11_MAT=IV11_Materialisme	IV12_SEL=IV12_Selvkontroll	IV13_S√ò=IV13_S√∏vnproblemer	IV14_S√ò=IV14_S√∏vntid_Ukedager	IV15_S√ò=IV15_S√∏vntid_Helg	IV16_MOS=IV16_Mosjon	IV17_TRE=IV17_Trening	IV18_SOM=IV18_SOME_Avhengighet	IV19_COV=IV19_COVID_belastning_studier	IV20_COV=IV20_COVID_belastning_generelt
)/EndDate:$@Role('0'
)/Status:$@Role('0'
)/Progress:$@Role('0'
)/Duration__in_seconds_:$@Role('0'
)/Finished:$@Role('0'
)/RecordedDate:$@Role('0'
)/Samtykke:$@Role('0'
)/Livstilfredshet_1:$@Role('0'
)/Livstilfredshet_2:$@Role('0'
)/Lykke_1:$@Role('0'
)/Lykke_2:$@Role('0'
)/Lykke_2_Reversed:$@Role('0'
)/Mening_1:$@Role('0'
)/Mening_2:$@Role('0'
)/Tilfreds_fremtid_1:$@Role('0'
)/Tilfreds_fremtid_2:$@Role('0'
)/Lykke_fremtid_1:$@Role('0'
)/Lykke_fremtid_2:$@Role('0'
)/Lykke_fremtid_2_Reversed:$@Role('0'
)/Mening_fremtid_1:$@Role('0'
)/Mening_fremtid_2:$@Role('0'
)/Jobb_sannsynlighet:$@Role('0'
)/Jobbtrivsel_sannsyn:$@Role('0'
)/Inntekt_tilfreds:$@Role('0'
)/Autonomi_1:$@Role('0'
)/Autonomi_2:$@Role('0'
)/Autonomi_3:$@Role('0'
)/Autonomi_4_R:$@Role('0'
)/Sosial_tilh_righet_1:$@Role('0'
)/Sosial_tilh_righet_2:$@Role('0'
)/Sosial_tilh_righet_3:$@Role('0'
)/Sosial_tilh_righet_4_R:$@Role('0'
)/Kompetanse_1:$@Role('0'
)/Kompetanse_2:$@Role('0'
)/Kompetanse_3:$@Role('0'
)/Kompetanse_4_R:$@Role('0'
)/Stress_1:$@Role('0'
)/Stress_2:$@Role('0'
)/Stress_3:$@Role('0'
)/Selvmedf_lelse_1:$@Role('0'
)/Selvmedf_lelse_2:$@Role('0'
)/Selvmedf_lelse_3_R:$@Role('0'
)/Selvmedf_lelse_4:$@Role('0'
)/A_vrige_trekk_1:$@Role('0'
)/A_vrige_trekk_2:$@Role('0'
)/A_vrige_trekk_3:$@Role('0'
)/A_vrige_trekk_4:$@Role('0'
)/A_vrige_trekk_5:$@Role('0'
)/A_vrige_trekk_6:$@Role('0'
)/A_vrige_trekk_7:$@Role('0'
)/A_vrige_trekk_8:$@Role('0'
)/A_vrige_trekk_9:$@Role('0'
)/A_vrige_trekk_10:$@Role('0'
)/A_vrige_trekk_11:$@Role('0'
)/A_vrige_trekk_12:$@Role('0'
)/Selvkontroll_1:$@Role('0'
)/Selvkontroll_2_R:$@Role('0'
)/Selvkontroll_3_R:$@Role('0'
)/Selvkontroll_4_R:$@Role('0'
)/Selvkontroll_5_R:$@Role('0'
)/Selvkontroll_6:$@Role('0'
)/Selvkontroll_7_R:$@Role('0'
)/Selvkontroll_8:$@Role('0'
)/Selvkontroll_9_R:$@Role('0'
)/Selvkontroll_10_R:$@Role('0'
)/Selvkontroll_11:$@Role('0'
)/Selvkontroll_12_R:$@Role('0'
)/Selvkontroll_13_R:$@Role('0'
)/S_vn_1:$@Role('0'
)/S_vn_2:$@Role('0'
)/S_vn_3:$@Role('0'
)/S_vn_4:$@Role('0'
)/S_vn_5:$@Role('0'
)/S_vn_6:$@Role('0'
)/Fysisk_utholdenhet:$@Role('0'
)/Fysisk_styrke:$@Role('0'
)/Sos_medie_avhengig_1:$@Role('0'
)/Sos_medie_avhengig_2:$@Role('0'
)/Sos_medie_avhengig_3:$@Role('0'
)/Sos_medie_avhengig_4:$@Role('0'
)/Sos_medie_avhengig_5:$@Role('0'
)/Sos_medie_avhengig_6:$@Role('0'
)/Sos_medie_type:$@Role('0'
)/Sos_medie_tidsbruk:$@Role('0'
)/Covid_belastning_1:$@Role('0'
)/Covid_belastning_2:$@Role('0'
)/Covid_belastning_3:$@Role('0'
)/Covid_belastning_4:$@Role('0'
)/Covid_belastning_5:$@Role('0'
)/Covid_belastning_6:$@Role('0'
)/Covid_belastning_7:$@Role('0'
)/Covid_belastning_8:$@Role('0'
)/Q75:$@Role('0'
)/Kj√∏nn:$@Role('0'
)/Alder_1:$@Role('0'
)/Studiested:$@Role('0'
)/Karaktersnitt:$@Role('0'
)/Tar_lykkekurset:$@Role('0'
)/Foreldre_utdanning:$@Role('0'
)/DV_Lykke:$@Role('0'
)/IV1_Autonomi:$@Role('0'
)/IV2_Sosial_Tilh√∏righet:$@Role('0'
)/IV3_Kompetanse:$@Role('0'
)/IV4_Stress:$@Role('0'
)/IV5_Selvmedf√∏lelse:$@Role('0'
)/IV6_Takknemlighet:$@Role('0'
)/IV7_Gener√∏sitet:$@Role('0'
)/IV8_Tillit:$@Role('0'
)/IV9_Fri_Vilje:$@Role('0'
)/IV10_Optimisme:$@Role('0'
)/IV11_Materialisme:$@Role('0'
)/IV12_Selvkontroll:$@Role('0'
)/IV13_S√∏vnproblemer:$@Role('0'
)/IV14_S√∏vntid_Ukedager:$@Role('0'
)/IV15_S√∏vntid_Helg:$@Role('0'
)/IV16_Mosjon:$@Role('0'
)/IV17_Trening:$@Role('0'
)/IV18_SOME_Avhengighet:$@Role('0'
)/IV19_COVID_belastning_studier:$@Role('0'
)/IV20_COVID_belastning_generelt:$@Role('0'
)Á
ê”	B
@
@˝˝˝lkkj˝
@
@öôôôôô@
@ÕÃÃÃÃÃ¸?
llnnnihigiiigihiiggiffeehiggihhhihggfffeeeeeefgeekgdghkhggffhfgiiiiihggghie{igehh˝
yegeh˝˝˝˝g˝
q()
a
install.packages("readxl")
library(tools, lib.loc = "C:/Program Files/R/R-4.0.5/library")
library(readxl)
install.packages("ggplot")
library(vctrs)
library(MASS, lib.loc = "C:/Program Files/R/R-4.0.5/library")
install.packages("ggplot2")
getwd
library("ggplot2")
ggplot2(data = data, aes(x = category, y = value)) +
geom_point()
ggplot(data = data, aes(x = category, y = value)) +
geom_point()
ggplot(data, aes(x = category, y = value)) +
geom_point()
data <- data.frame(
category = c("A", "B", "C", "D"),
value = c(3, 7, 5, 9),
group = c("X", "X", "Y", "Y"),
year = c(2020, 2021, 2020, 2021)
)
ggplot(data, aes(x = category, y = value)) +
geom_point()
ggplot(data = data, aes(x = category, y = value)) +
geom_point()
# scatter plot (geom_point)
ggplot(data = data, aes(x = category, y = value)) +
geom_point(size = 3, color = blue)
geom_point(size = 3, color = "blue"")
# scatter plot (geom_point)
ggplot(data = data, aes(x = category, y = value)) +
geom_bar()
ggplot(data = data, aes(x = category, y = value)) +
geom_bar(stat = "identity")
ggplot(data = data, aes(x = category, y = value)) +
geom_bar(stat = "identity")
# bar chart (geom_bar)
ggplot(data = data, aes(x = category, y = value, fill = group)) +
geom_bar(stat = "identity")
ggplot(data = data, aes(x = category, y = value, group = category, color = category))+
geom_line()
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line()
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line()
ggplot(data, aes(x = year, y = value, group = category, color = category)) +
geom_line()
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 3)
ggplot(data, aes(x = value)) +
geom_histogram(bins = 5, fill = "orange", color = "black")
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 3, color = "black")
ggplot(data = data, aes(x = year, y = value))+
geom_line(size = 3, color = "black")
ggplot(data = data, aes(x = year, y = value, group = category))+
geom_line(size = 3, color = "black")
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 3, color = "black")
data <- data.frame(
category = c("A", "A", "B", "B", "C", "C", "D", "D"),
value = c(3, 5, 7, 8, 5, 6, 9, 10),
group = c("X", "X", "Y", "Y", "X", "X", "Y", "Y"),
year = c(2020, 2021, 2020, 2021, 2020, 2021, 2020, 2021)
)
# scatter plot (geom_point)
ggplot(data = data, aes(x = category, y = value)) +
geom_point(size = 3, color = "blue")
# bar chart (geom_bar)
ggplot(data = data, aes(x = category, y = value, fill = group)) +
geom_bar(stat = "identity")
# bar chart (geom_bar)
ggplot(data = data, aes(x = category, y = value, fill = group)) +
geom_bar(stat = "identity")
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 3, color = "black")
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 1, color = "black")
# histogram (geom_line)
ggplot(data, aes(x = value)) +
geom_histogram(bins = 5, fill = "orange", color = "black")
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 2, color = "black")
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 2, color = "black")+
labs(title = "Line plot by category", x= "year", y = "value")
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 1.5,
color = "black")+
xlim(2019,2022)+
ylim(0, 12)+
labs(
title = "Line plot by category",
x= "time period",
y = "value")
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 1.5,
color = "black")+
scale_x_continuous(
breaks = c(2020,2021) # specify breaks
labels = c("year 2020", "year 2021") #custom labels
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 1.5,
color = "black")+
scale_x_continuous(
breaks = c(2020,2021) # specify breaks
labels = c("year 2020", "year 2021") #custom labels
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 1.5,
color = "black")+
scale_x_continuous(
breaks = c(2020,2021),  # specify breaks
labels = c("year 2020", "year 2021") #custom labels
)
x= "year"
e
ggplot(data = data, aes(x = year, y = value, group = category, color = category))+
geom_line(size = 1.5,
color = "black")+
scale_x_continuous(
breaks = c(2020,2021),  # specify breaks
labels = c("year 2020", "year 2021") #custom labels
)
# load relevant packages
library("ggplot2")  # for plotting sales data
library("tidyverse") # for data wrangling
# example sales data
sales_data <- data.frame(
product = c("A", "B", "C", "D"),
sales_2020 = c(300, 400, 350, NA),
sales_2021 = c(320, NA, 370, 410),
sales_2022 = c(310, 430, NA, 450)
)
# inspect data frame
head(sales_data)
# inspect missing values
is.na(sales_data)
colSums(is.na(sales_data))
# handle missing data values
sales_data_clean <- sales_data %>%
mutate(
sales_2020 = ifelse(is.na(sales_2020,na.rm =TRUE, sales_2020)),
sales_2021 = ifelse(is.na(sales_2021,na.rm =TRUE, sales_2021)),
sales_2022 = ifelse(is.na(sales_2022,na.rm =TRUE, sales_2022))
)
# handle missing data values
sales_data_clean <- sales_data %>%
replace_na(list(
sales_2020 = 0,
sales_2021 = 0,
sales_2022 =0
))
View(sales_data_clean)
View(sales_data)
?pivot_longer
# manipulate data into long format for plotting
pivot_longer(data = sales_data_clean,
cols = (sales_data_clean$sales_2020,
# manipulate data into long format for plotting
pivot_longer(data = sales_data_clean,
cols = starts_with("sales_"),
names_to = "year",
values_to = "sales")
# manipulate data into long format for plotting
sales_long <- pivot_longer(data = sales_data_clean,
cols = starts_with("sales_"),
names_to = "year",
values_to = "sales")
View(sales_long)
sales_long <- sales_data_clean %>%
pivot_longer(
cols = starts_with("sales_"),  # Pivot columns starting with "sales_"
names_to = "year",             # New column for the names
values_to = "sales",           # New column for the values
names_prefix = "sales_"        # Remove the "sales_" prefix
)
View(sales_long)
)
sales_long <- sales_data_clean %>%
pivot_longer(
cols = (sales_2020:sales_2022),  # Pivot columns starting with "sales_"
names_to = "year",             # New column for the names
values_to = "sales"          # New column for the values
)
View(sales_long)
View(sales_data_clean)
sales_long <- sales_data_clean %>%
pivot_longer(
cols = (sales_2020:sales_2022),  # Pivot columns starting with "sales_"
names_to = "year",             # New column for the names
values_to = "sales",
names_prefix = "sales_"    # New column for the values
)
View(sales_long)
p
ggplot(sales_long, aes(x = year, y = sales, group = product, color = product)) +
geom_line(size = 1.5) +
labs(
title = "Sales Trends by Product",
x = "Year",
y = "Sales"
) +
theme_minimal()
ggplot(sales_long, aes(x = year, y = sales, group = product, color = product)) +
geom_line(size = 1.5) +
geom_point(size = 3) +
labs(
title = "Sales Trends by Product (With Points)",
x = "Year",
y = "Sales"
) +
theme_minimal()
sales_long$year <- as.numeric(sales_long$year)  # Convert year to numeric
ggplot(sales_long, aes(x = year, y = sales, color = product)) +
geom_line(size = 1.5) +
geom_point(size = 3) +
facet_wrap(~ product) +
labs(
title = "Sales Trends for Each Product",
x = "Year",
y = "Sales"
) +
theme_minimal()
ggplot(sales_long, aes(x = year, y = sales, group = product, color = product)) +
geom_line(size = 1.5) +
geom_point(size = 3) +
geom_text(aes(label = sales), vjust = -0.5, size = 3) +
labs(
title = "Sales Trends by Product",
x = "Year",
y = "Sales"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
rm(data)
rm(sales_data)
rm(sales_data_clean)
rm(sales_long)
rm(ELDRE,MIDDEL,test,UNG,x)
rm(MIDDELL)
clearPushBack()
a = 2 +.1
a = 2 +.1
a = 2 +.1
```{r}
a = 2 +.1
a = 2 +.1
```{r}
# Ensures that the code does not show in the output document, but is executed
knitr::opts_chunk$set(echo = FALSE)
---
title: "Assignment_1"
1 + 1
data <- read_csv("truffles.csv")
library(tidyverse)  # Data manipulation and visualization
library(readr)      # CSV file reading
library(broom)      # Tidying up statistical models
library(lmtest)     # Testing linear regression models
library(sandwich)   # Robust covariance matrix estimations
library(stargazer)  # Beautiful LaTeX tables from R statistical output
library(gtsummary)  # Presentation-ready summary statistics
library(AER)        # For 2SLS estimation
data <- read_csv("truffles.csv",show_col_types = FALSE)
# Print the first few rows of the dataset to confirm it's loaded correctly
head(data)
# Summary statistics for each column
summary(data)
# Check for missing values
sum(is.na(data))
# Plotting `pigrental` against `quantity`
ggplot(data, aes(x = quantity, y = pigrental)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Relationship between Pig Rental Prices and Quantity",
x = "Quantity", y = "Pig Rental Prices")
# Plotting `income` against `quantity`
ggplot(data, aes(x = quantity, y = income)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Relationship between Income and Quantity",
x = "Quantity", y = "Income")
# Model without controlling for market
model_without_market <- lm(quantity ~ pigrental + income, data = data)
summary(model_without_market)
# Model with controlling for market as a factor
model_with_market <- lm(quantity ~ pigrental + income + factor(market), data = data)
summary(model_with_market)
# Run the first-stage linear regression
first_stage <- lm(price ~ pigrental + income + factor(market), data = data)
summary(first_stage)
# Using ivreg from the AER package to perform the second-stage regression
demand_model <- ivreg(quantity ~ price + factor(market) + income | pigrental + factor(market) + income, data = data)
summary(demand_model)
# Define a sequence of prices
price_range <- seq(from = min(data$price), to = max(data$price), length.out = 100)
# Predict quantity demanded for each price in price_range
# Assume average values for other predictors if they're not included in the regression
average_income <- mean(data$income, na.rm = TRUE)
predicted_quantity_demand <- predict(demand_model, newdata = data.frame(price = price_range, income = average_income), type = "response")
# Define a sequence of prices
price_range <- seq(from = min(data$price), to = max(data$price), length.out = 100)
# Predict quantity demanded for each price in price_range
# Assume average values for other predictors if they're not included in the regression
average_income <- mean(data$income, na.rm = TRUE)
predicted_quantity_demand <- predict(demand_model, newdata = data.frame(price = price_range, income = average_income), type = "response")
# Generate a new data frame for prediction that includes the range of prices
# and the average or typical values for other covariates
average_income <- mean(data$income, na.rm = TRUE)
market_levels <- levels(factor(data$market))
# Create a new data frame for each market level and replicate average income
new_data_demand <- expand.grid(price = price_range,
income = average_income,
market = market_levels)
# Predict quantity demanded for each combination of price and market
predicted_quantity_demand <- predict(demand_model, newdata = new_data_demand, type = "response")
# Calculate average or representative values for pigrental and income
average_pigrental <- mean(data$pigrental, na.rm = TRUE)
average_income <- mean(data$income, na.rm = TRUE)
market_levels <- levels(factor(data$market))
# Generate a new data frame for prediction that includes all required variables
new_data_demand <- expand.grid(price = price_range,
pigrental = average_pigrental,  # Include average pigrental
income = average_income,
market = market_levels)
# Now generate predictions using this new data frame
predicted_quantity_demand <- predict(demand_model, newdata = new_data_demand, type = "response")
# Create a data frame for plotting
demand_curve <- data.frame(price = rep(price_range, times = length(market_levels)),
quantity = predicted_quantity_demand,
market = rep(market_levels, each = length(price_range)))
library(ggplot2)
# Plot the demand curve for each market
ggplot(demand_curve, aes(x = price, y = quantity, color = market)) +
geom_line() +
labs(title = "Demand Curve for Truffles by Market",
x = "Price", y = "Quantity Demanded") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
library(ggplot2)
# Plot the demand curve for each market
ggplot(demand_curve, aes(x = quantity, y = price, color = market)) +
geom_line() +
labs(title = "Demand Curve for Truffles by Market",
x = "Quantity demanded", y = "Price") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Adjust color palette as needed
# Assuming we're still using the average values calculated previously:
# average_pigrental, average_income, and market_levels
# Generate a new data frame for supply prediction
new_data_supply <- expand.grid(price = price_range,
pigrental = average_pigrental,
income = average_income,  # Include if income affects supply
market = market_levels)
# Ensure this data frame includes all covariates used in the supply model.
# Assuming 'supply_model' is your IV regression model for supply
predicted_quantity_supply <- predict(supply_model, newdata = new_data_supply, type = "response")
# Assuming 'supply_model' is your IV regression model for supply
predicted_quantity_supply <- predict(supply_model, newdata = new_data_supply, type = "response")
View(data)
View(data)
setwd("C:/Users/willi/NHH/2025_V/BAN440/BAN440-Term-Paper/Data/Vinmonopolet")
source("C:/Users/willi/NHH/2025_V/BAN440/BAN440-Term-Paper/Code/Data wrangling/Model_variables_merge.R")
