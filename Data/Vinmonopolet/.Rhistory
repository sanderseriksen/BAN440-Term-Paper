# Save the updated data to a new Excel file
#write_xlsx(data_df, "final_data_17.xlsx")
# Read in data from Excel files
Kommuneendringer_18_xlsx <- here("Data", "Vinmonopolet", "Kommuneendringer_18.xlsx")
kommuneendringer_df <- read_excel(Kommuneendringer_18_xlsx)
# Clean up column names by using the correct column names
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Split old municipality numbers (in case multiple old municipalities are separated by spaces)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Create a lookup list for old codes to new codes (one-way mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Update both Municipality_Code and Municipality_Name in data_df
data_df <- data_df %>%
rowwise() %>%
mutate(
new_val = if (Municipality_Code %in% names(kommune_mapping)) kommune_mapping[[Municipality_Code]] else NA_character_,
Municipality_Code = if (!is.na(new_val)) substr(new_val, 1, 4) else Municipality_Code,
Municipality_Name = if (!is.na(new_val)) str_trim(str_remove(new_val, "^[0-9]{4}\\s*-\\s*")) else Municipality_Name
) %>%
ungroup() %>%
select(-new_val)
# Save the updated file
#write_xlsx(data_df, "final_data_18.xlsx")
# Read in data from Excel files
Kommuneendringer_20_xlsx <- here("Data", "Vinmonopolet", "Kommuneendringer_20.xlsx")
kommuneendringer_df <- read_excel(Kommuneendringer_20_xlsx)
# Clean up column names by using the correct column names
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Split old municipality numbers (in case multiple old municipalities are separated by spaces)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Create a lookup list for old codes to new codes (one-way mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Update both Municipality_Code and Municipality_Name in data_df
data_df <- data_df %>%
rowwise() %>%
mutate(
new_val = if (Municipality_Code %in% names(kommune_mapping)) kommune_mapping[[Municipality_Code]] else NA_character_,
Municipality_Code = if (!is.na(new_val)) substr(new_val, 1, 4) else Municipality_Code,
Municipality_Name = if (!is.na(new_val)) str_trim(str_remove(new_val, "^[0-9]{4}\\s*-\\s*")) else Municipality_Name
) %>%
ungroup() %>%
select(-new_val)
# Save the updated file
#write_xlsx(data_df, "final_data_20.xlsx")
# Read in data from Excel files
Kommuneendringer_24_xlsx <- here("Data", "Vinmonopolet", "Kommuneendringer_24.xlsx")
kommuneendringer_df <- read_excel(Kommuneendringer_24_xlsx)
# Clean up column names by using the correct column names
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Split old municipality numbers (in case multiple old municipalities are separated by spaces)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Create a lookup list for old codes to new codes (one-way mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code,
times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Update both Municipality_Code and Municipality_Name in data_df
data_df <- data_df %>%
rowwise() %>%
mutate(
new_val = if (Municipality_Code %in% names(kommune_mapping)) kommune_mapping[[Municipality_Code]] else NA_character_,
Municipality_Code = if (!is.na(new_val)) substr(new_val, 1, 4) else Municipality_Code,
Municipality_Name = if (!is.na(new_val)) str_trim(str_remove(new_val, "^[0-9]{4}\\s*-\\s*")) else Municipality_Name
) %>%
ungroup() %>%
select(-new_val)
# Hardcode row 121 to set "Municipality_Code" to 1580 and "Municipality_Name" to Haram
data_df[121, "Municipality_Code"] <- "1580"
data_df[121, "Municipality_Name"] <- "Haram"
# Save the updated file
#write_xlsx(data_df, "final_data_24.xlsx")
# Kommune data file path
Kommune_data_xlsx <- here("Data", "Vinmonopolet", "Kommune_data.xlsx")
# Read data for total population and area of each municipality
kommune_data <- read_excel(Kommune_data_xlsx, skip = 3) %>%
rename("Municipality" = "...1",
"Population" = "2025...2",
"Area" = "2025...3") %>%
separate(Municipality, into = c("Mun_num", "Mun_name"), sep = " ", extra = "merge", fill = "right") %>%
filter(Population != 0,
Area != 0) %>%
mutate(Population = as.numeric(Population),
Area = as.numeric(Area))
# Demographic data file path
Kommune_demo_xlsx <- here("Data", "Vinmonopolet", "Kommune_demo.xlsx")
# Read data for demographic data
demographic_data <- read_excel(Kommune_demo_xlsx, skip = 4) %>%
rename("Municipality" = "...1",
"0-17" = "0-17 år",
"18+" = "18 år eller eldre") %>%
filter(if_all(everything(), ~ !is.na(.) & . != 0)) %>% # Remove rows with NA or 0 in any column
separate(Municipality, into = c("Mun_num", "Mun_name"), sep = " ", extra = "merge", fill = "right") %>%
separate(Mun_num, into = c("K", "Mun_num"), sep = "-") %>%
select(-"K",
-"Mun_name")
# Merge the two datasets
kommune_data_final <- kommune_data %>%
left_join(demographic_data, by = c("Mun_num"))
# Write data to Excel
#write_xlsx(kommune_data_final, "Kommune_data_final.xlsx")
final_data <- data_df
# Transforming to normal characters
final_data$Municipality_Name <- iconv(final_data$Municipality_Name, from = "UTF-8", to = "ASCII//TRANSLIT")
final_data$Municipality_Name <- trimws(final_data$Municipality_Name)
# Standardize store names to improve matching
final_data <- final_data %>%
mutate(Municipality_Name = str_trim(str_to_lower(Municipality_Name)))  # Trim spaces and convert to lowercase
# Loading the kommune data
kommune_data <- kommune_data_final
# Standardize the kommune data
kommune_data <- kommune_data %>%
mutate(Mun_name = iconv(Mun_name, from = "UTF-8", to = "ASCII//TRANSLIT"),
Mun_name = str_trim(str_to_lower(Mun_name)))  # Trim spaces and convert to lowercase
# Perform a full join to include all rows from both datasets
merged_data <- final_data %>%
full_join(kommune_data, by = c("Municipality_Code" = "Mun_num"))
# Replace NA values in store-related columns with 0
# Assuming 'Store_Info_Column' is the column in final_data that contains store information
# Replace 'Store_Info_Column' with the actual column names you want to fill with 0
merged_data <- merged_data %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
# If you have specific columns to replace NA with 0, you can specify them like this:
# merged_data <- merged_data %>%
#   mutate(Store_Info_Column = replace_na(Store_Info_Column, 0))
# Write the merged data to an Excel file
#write_xlsx(merged_data, "final_data_mun.xlsx")
View(merged_data)
install.packages("geosphere")
# relevant libraries
library(tidyverse)
library(readxl)
library(fastDummies)
library(knitr)
library(stargazer)
library(caret)
library(here)
library(httr)
library(jsonlite)
library(readr)
library(stringr)
library(tidyr) # Load tidyr for unnesting
library(writexl)
library(geosphere)
final_data_mun_dist <- here("Vinmonopolet", "Data", "final_data_mun_dist.xlsx")
# Load data
Vinmonopolet <- read_excel(final_data_mun_dist) %>%
select(-c(Store_ID, Store_Status, Postal_Code, Poststed,
PostnummerKategoriKode, PostnummerKategori, Region_Code,
Municipality_Name)) %>%
mutate(
Municipality_Name = Mun_name,
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "AKERSHUS" ~ "Akershus",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "BUSKERUD" ~ "Buskerud",
Region_Name == "VESTFOLD" ~ "Vestfold",
Region_Name == "FINNMARK" ~ "Finnmark",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "MØRE OG ROMSDAL" ~ "Møre og Romsdal",
Region_Name == "NORDLAND" ~ "Nordland",
Region_Name == "OSLO" ~ "Oslo",
Region_Name == "ROGALAND" ~ "Rogaland",
Region_Name == "TELEMARK" ~ "Telemark",
Region_Name == "TROMS" ~ "Troms",
Region_Name == "SØR-TRØNDELAG" ~ "Trøndelag",
Region_Name == "NORD-TRØNDELAG" ~ "Trøndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
Region_Name == "ØSTFOLD" ~ "Østfold",
is.na(Region_Name) & str_starts(Municipality_Code, "03") ~ "Oslo",
is.na(Region_Name) & str_starts(Municipality_Code, "11") ~ "Rogaland",
is.na(Region_Name) & str_starts(Municipality_Code, "15") ~ "Møre og Romsdal",
is.na(Region_Name) & str_starts(Municipality_Code, "18") ~ "Nordland",
is.na(Region_Name) & str_starts(Municipality_Code, "31") ~ "Østfold",
is.na(Region_Name) & str_starts(Municipality_Code, "32") ~ "Akershus",
is.na(Region_Name) & str_starts(Municipality_Code, "33") ~ "Buskerud",
is.na(Region_Name) & str_starts(Municipality_Code, "34") ~ "Innlandet",
is.na(Region_Name) & str_starts(Municipality_Code, "39") ~ "Vestfold",
is.na(Region_Name) & str_starts(Municipality_Code, "40") ~ "Telemark",
is.na(Region_Name) & str_starts(Municipality_Code, "42") ~ "Agder",
is.na(Region_Name) & str_starts(Municipality_Code, "46") ~ "Vestland",
is.na(Region_Name) & str_starts(Municipality_Code, "50") ~ "Trøndelag",
is.na(Region_Name) & str_starts(Municipality_Code, "55") ~ "Troms",
is.na(Region_Name) & str_starts(Municipality_Code, "56") ~ "Finnmark",
TRUE ~ Region_Name  # Keep existing Region_Name if no conditions are met
)
) %>%
select(-Mun_name)
vin <- read_excel(final_data_mun_dist)
final_data_mun_dist <- here("Data", "Vinmonopolet" "final_data_mun_dist.xlsx")
final_data_mun_dist <- here("Data", "Vinmonopolet", "final_data_mun_dist.xlsx")
# Load data
Vinmonopolet <- read_excel(final_data_mun_dist) %>%
select(-c(Store_ID, Store_Status, Postal_Code, Poststed,
PostnummerKategoriKode, PostnummerKategori, Region_Code,
Municipality_Name)) %>%
mutate(
Municipality_Name = Mun_name,
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "AKERSHUS" ~ "Akershus",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "BUSKERUD" ~ "Buskerud",
Region_Name == "VESTFOLD" ~ "Vestfold",
Region_Name == "FINNMARK" ~ "Finnmark",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "MØRE OG ROMSDAL" ~ "Møre og Romsdal",
Region_Name == "NORDLAND" ~ "Nordland",
Region_Name == "OSLO" ~ "Oslo",
Region_Name == "ROGALAND" ~ "Rogaland",
Region_Name == "TELEMARK" ~ "Telemark",
Region_Name == "TROMS" ~ "Troms",
Region_Name == "SØR-TRØNDELAG" ~ "Trøndelag",
Region_Name == "NORD-TRØNDELAG" ~ "Trøndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
Region_Name == "ØSTFOLD" ~ "Østfold",
is.na(Region_Name) & str_starts(Municipality_Code, "03") ~ "Oslo",
is.na(Region_Name) & str_starts(Municipality_Code, "11") ~ "Rogaland",
is.na(Region_Name) & str_starts(Municipality_Code, "15") ~ "Møre og Romsdal",
is.na(Region_Name) & str_starts(Municipality_Code, "18") ~ "Nordland",
is.na(Region_Name) & str_starts(Municipality_Code, "31") ~ "Østfold",
is.na(Region_Name) & str_starts(Municipality_Code, "32") ~ "Akershus",
is.na(Region_Name) & str_starts(Municipality_Code, "33") ~ "Buskerud",
is.na(Region_Name) & str_starts(Municipality_Code, "34") ~ "Innlandet",
is.na(Region_Name) & str_starts(Municipality_Code, "39") ~ "Vestfold",
is.na(Region_Name) & str_starts(Municipality_Code, "40") ~ "Telemark",
is.na(Region_Name) & str_starts(Municipality_Code, "42") ~ "Agder",
is.na(Region_Name) & str_starts(Municipality_Code, "46") ~ "Vestland",
is.na(Region_Name) & str_starts(Municipality_Code, "50") ~ "Trøndelag",
is.na(Region_Name) & str_starts(Municipality_Code, "55") ~ "Troms",
is.na(Region_Name) & str_starts(Municipality_Code, "56") ~ "Finnmark",
TRUE ~ Region_Name  # Keep existing Region_Name if no conditions are met
)
) %>%
select(-Mun_name)
# Aggregating per municipality data
Vinmonopolet_market <- Vinmonopolet %>%
group_by(Municipality_Code) %>%
summarise(
Mun_name = first(Municipality_Name),
Region_Name = first(Region_Name),
Population = first(Population),
Area = first(Area),
Number_of_stores = sum(`2024` > 0),  # Count non-zero sales
Sales = sum(`2024`),
Lat = first(Latitude),
Lon = first(Longitude),
Dist_nearest = first(dist_nearest_store),
)
# Scaling the variables that have nt been scaled yet
Vinmonopolet_market <- Vinmonopolet_market %>%
mutate(Population = Population / 1000,
Sales = Sales / 1000)
Grensehandel_weights <- here("Data", "Vinmonopolet", "Grensehandel_weights.xlsx")
# Load the weights datas
weights <- read_excel(Grensehandel_weights, skip = 3) %>%
slice(1) %>%
select(-'...1') %>%
mutate(
mean_weight = (as.numeric(`2024K1`) + as.numeric(`2024K2`) + as.numeric(`2024K3`) + as.numeric(`2024K4`)) / 4
)
weight_grensehandel <- weights$mean_weight / 100
# Load the regional data
Grensehandel_regions <- here("Data", "Vinmonopolet", "Grensehandel_regions.xlsx")
regional <- read_excel(Grensehandel_regions)
total_grensehandel <- sum(regional$"2024")
# Calculate grensehandel per region
regional <- regional %>%
rename(
Region = `Fylker`,
Total_sale = `2024`
) %>%
mutate(
Grensehandel = Total_sale * weight_grensehandel
)
# Split the "Vestlandet" region row into three new rows: "Rogaland", "Vestland" and "MC8re og Romsdal"
regional <- regional %>%
rbind(
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Rogaland"),
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Vestland"),
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Møre og Romsdal")
) %>%
filter(Region != "Vestlandet")
# Divide the grensehandel value by three for "Rogaland", "Vestland" and "MC8re og Romsdal"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Rogaland" ~ Grensehandel * 0.35,
Region == "Vestland" ~ Grensehandel * 0.46,
Region == "Møre og Romsdal" ~ Grensehandel * 0.19,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Split the "Nord-Norge" region row into three new rows: "Nordland", "Troms" and "Finnmark"
# And divide the grensehandel value by three
regional <- regional %>%
mutate(
Grensehandel = ifelse(Region == "Nord-Norge", Grensehandel / 3, Grensehandel)
) %>%
rbind(
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Nordland"),
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Troms"),
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Finnmark")
) %>%
filter(Region != "Nord-Norge")
# Divide the grensehandel value by three for "Nordland", "Troms" and "Finnmark"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Nordland" ~ Grensehandel * 0.5,
Region == "Troms" ~ Grensehandel * 0.35,
Region == "Finnmark" ~ Grensehandel * 0.15,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Split the "Agder, Telemark, Buskerud og Vestfold" column into four new columns: "Agder", "Telemark", "Buskerud" and "Vestfold"
# And divide the grensehandel value by four
regional <- regional %>%
mutate(
Grensehandel = ifelse(Region == "Agder, Telemark, Buskerud og Vestfold", Grensehandel / 4, Grensehandel)
) %>%
rbind(
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Agder"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Telemark"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Buskerud"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Vestfold")
) %>%
filter(Region != "Agder, Telemark, Buskerud og Vestfold")
# Divide the grensehandel value by four for "Agder", "Telemark", "Buskerud" and "Vestfold"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Agder" ~ Grensehandel * 0.31,
Region == "Telemark" ~ Grensehandel * 0.17,
Region == "Buskerud" ~ Grensehandel * 0.26,
Region == "Vestfold" ~ Grensehandel * 0.26,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Removing the "total_sale" column from the regional data set
regional <- regional %>% select(-Total_sale)
# Merge the regional data with the main data set on Region_Name in the Vinmonopolet_market data set and Region in the regional data set
Vinmonopolet_market <- left_join(Vinmonopolet_market, regional, by = c("Region_Name" = "Region"))
# Add a new column "Region_pop" where "Population" is summarized for each region
Vinmonopolet_market <- Vinmonopolet_market %>%
group_by(Region_Name) %>%
mutate(Region_pop = sum(Population)) %>%
ungroup()
Vinmonopolet_market <- Vinmonopolet_market %>%
mutate(Kommune_share = Population / Region_pop,
Grensehandel_mun = Grensehandel * Kommune_share) %>%
select(-c("Region_pop", "Kommune_share", "Grensehandel")) %>%
rename(Grensehandel = Grensehandel_mun)
Tourism_xlsx <- here("Data", "Vinmonopolet", "Tourism.xlsx")
# Reading tourism data
Tourism <- read_excel(Tourism_xlsx, skip = 4) %>%
rename(
Mun = '...1',
H = 'Hotell og liknande overnattingsbedrifter',
C = 'Campingplassar, hyttegrender og vandrarheim',
) %>%
select(-'...2') %>%
mutate_at(vars(H, C), ~as.numeric(str_replace_all(., ":", "0"))) %>%
mutate(n_stays = H + C) %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Mun", "H", "C", "Municipality_Name")) %>%
filter(!is.na(Municipality_Code))
# Merging the data
Vinmonopolet_market <- left_join(Vinmonopolet_market, Tourism, by = "Municipality_Code") %>%
mutate(
n_stays = ifelse(is.na(n_stays), 0, n_stays),
n_stays = n_stays / 1000
)
# Load data
Monthly_salary <- here("Data", "Vinmonopolet", "Monthly_Salary.xlsx")
data <- read_excel(Monthly_Salary)
# Load data
Monthly_Salary <- here("Data", "Vinmonopolet", "Monthly_Salary.xlsx")
data <- read_excel(Monthly_Salary)
# Cleaning data by removing rows with missing values and rows with dots
clean_data <- data %>%
filter(!apply(., 1, function(row) any(grepl("\\.", row)))) %>%
na.omit()
# Remove the last two rows from the data, using tidyverse
clean_data <- clean_data %>%
slice(1:(n() - 2)) %>%
select(-'...2') %>%
rename(
Mun = `12852: Kommunefordelt månedslønn, etter region, statistikkmål, statistikkvariabel, år og arbeidssted/bosted`,
Monthly_salary = '...3'
) %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Municipality_Name", "Mun")) %>%
mutate(Monthly_salary = as.numeric(Monthly_salary),
Monthly_salary = Monthly_salary / 1000)
# Merge with the main data set
Vinmonopolet_market <- left_join(Vinmonopolet_market, clean_data, by = "Municipality_Code")
# Load data
Concentration_xlsx <- here("Data", "Vinmonopolet", "Concentration.xlsx")
concentration <- read_excel(Concentration_xlsx, skip = 5) %>%
slice(1:357) %>%
select('...1',
'Spredtbygd strøk...3') %>%
rename(Mun = '...1',
Spread = 'Spredtbygd strøk...3') %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Municipality_Name", "Mun")) %>%
mutate(Spread = as.numeric(Spread),
Spread = Spread / 1000)
# Remove the first two characters of each cell in the "Municpality_Code" column
concentration$Municipality_Code <- substr(concentration$Municipality_Code, 3, nchar(concentration$Municipality_Code))
# Merge with the main data set
Vinmonopolet_market <- left_join(Vinmonopolet_market, concentration, by = "Municipality_Code")
# Load data
Active_xlsx <- here("Data", "Vinmonopolet", "Active.xlsx")
A1 <- read_excel(Active_xlsx, sheet = 1, skip = 2)
A2 <- read_excel(Active_xlsx, sheet = 2, skip = 2)
# Merge the two data sets
Active <- A1 %>%
bind_rows(A2) %>%
select(-c('1', '...3', Fylke))
# Rename columns
names(Active)[1] <- "Mun_name"
# Remove unncessary spaces and numbers from the "Mun_name" column
Active$Mun_name <- substr(Active$Mun_name, 4, nchar(Active$Mun_name))
Active$Mun_name <- trimws(Active$Mun_name, which = "left")
# Replace norwegian special letters with english ones and make all letters lowercase
Active$Mun_name <- tolower(iconv(Active$Mun_name, from = "UTF-8", to = "ASCII//TRANSLIT"))
# Recode the "Mun_name" column
Active$Mun_name <- case_when(
Active$Mun_name == "hamaroy" ~ "habmer - hamaroy",
Active$Mun_name == "hattfjelldal" ~ "aarborte - hattfjelldal",
Active$Mun_name == "valer (viken)" ~ "valer (ostfold)",
TRUE ~ Active$Mun_name)
# Make a dummy variable for active stores
Vinmonopolet_market$Active <- ifelse(Vinmonopolet_market$Mun_name %in% Active$Mun_name, 1, 0)
# relevant libraries
library(tidyverse)
library(readxl)
library(fastDummies)
library(knitr)
library(stargazer)
library(caret)
library(here)
library(httr)
library(jsonlite)
library(readr)
library(stringr)
library(tidyr) # Load tidyr for unnesting
library(writexl)
library(geosphere)
library(caret)
### Data preparation ###########################################################
# Narrowing down the data to only contain relevant markets
# Excluding the largest cities because they are not representative
# Train and test split, training data all observations with a store
train_data <- Vinmonopolet_market %>%
filter(Number_of_stores > 0)
# Test data all observations without a store
test_data <- Vinmonopolet_market %>%
filter(Number_of_stores == 0)
### Model selection ###########################################################
# Forward selection
forward_model <- step(lm(Sales ~ 1, data = train_data),
scope = ~ Population + Grensehandel + n_stays + Monthly_salary + Area + Number_of_stores + Spread,
direction = "forward")
summary(forward_model)
# Backward selection
backward_model <- step(lm(Sales ~ Population + Grensehandel + n_stays + Monthly_salary + Area + Number_of_stores + Spread,
data = train_data),
direction = "backward")
summary(backward_model)
lm_Area <- lm(Sales ~ Area, data = train_data)
summary(lm_Area)
lm_pop <- lm(Sales ~ Population, data = Vinmonopolet_market)
summary(lm_pop)
small_data <- Vinmonopolet_market %>%
filter(Number_of_stores == 1 | 0)
lm_pop_test <- lm(Sales ~ Population, data = small_data)
summary(lm_pop_test)
# Linear regression model for predicting sales with all the variables
var_test <- lm(Sales ~ Population + Grensehandel + n_stays + Monthly_salary + Area +
Number_of_stores + Spread,
data = Vinmonopolet_market)
stargazer(var_test, type = "text")
# From these regressions we see that we want to remove the "Area" and "prop_spread" variables
# from the regressions as they are not significant.
### Demand estimation ##########################################################
## Linear regression
# Predicting sales using the training data
reg1 <- lm(Sales ~ Population + Grensehandel + n_stays + Monthly_salary,
data = train_data)
summary(reg1)
# Applying the model on the test data
test_data$Sales_pred <- predict(reg1, newdata = test_data)
## Merge predicted data into the original data
# Deselect unnecessary columns to merge the data easier
test_data <- test_data %>%
select(Municipality_Code, Sales_pred)
# Merge predicted demand (sales) back into the original data
Vinmonopolet_market <- Vinmonopolet_market %>%
left_join(test_data, by = "Municipality_Code") %>%
mutate(Sales = ifelse(Sales == 0, Sales_pred, Sales)) %>%
select(-Sales_pred) %>%
mutate(Sales = ifelse(Sales < 0, 0, Sales),
Number_of_stores = as.integer(Number_of_stores)) %>%
filter(Number_of_stores < 2)
