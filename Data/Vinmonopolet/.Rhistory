# Predict the first GAM model
pred_gam1 <- predict(gam_model, newdata = test_data)
# RMSE for the first GAM model
rmse_gam1 <- RMSE(pred_gam1, test_data$lsalary)
# Predict the second GAM model
pred_gam2 <- predict(gam_model2, newdata = test_data)
# RMSE for the second GAM model
rmse_gam2 <- RMSE(pred_gam2, test_data$lsalary)
# Print RMSEs
cat("MSE for GAM Model 1:", rmse_gam1, "\n")
cat("MSE for GAM Model 2:", rmse_gam2, "\n")
cat("MSE for Linear Model:", lm_rmse, "\n")
# Compare RMSE of all models
comparison <- tibble(
Model = c("Linear Regression", "LASSO Regression", "KNN", "GAM Model 1", "GAM Model 2"),
RMSE = c(lm_rmse, lasso_rmse, RMSE_knn, rmse_gam1, rmse_gam2))
comparison
install.packages("gridExtra")
library(gridExtra)  # For arranging plots
# Function to plot each predictor against lsalary with a smoothing line
plot_nonlinear_relationships <- function(data, response, predictors) {
plots <- list()
for (var in predictors) {
p <- ggplot(data, aes_string(x = var, y = response)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "blue", se = TRUE) +
labs(title = paste("Relationship between", var, "and", response),
x = var, y = response) +
theme_minimal()
plots[[var]] <- p
}
do.call(grid.arrange, c(plots, ncol = 2))
}
# List of predictor variables to check
predictor_vars <- names(ceosal2_clean)[names(ceosal2_clean) != "lsalary"]
# Plot the relationships
plot_nonlinear_relationships(ceosal2_clean, "lsalary", predictor_vars)
rm(ceosal2_clean$pred_lsalary)
# Compare AIC of linear and GAM models
AIC(lm_model, gam_model)
# Predict the GAM model
pred_gam1 <- predict(gam_model, newdata = test_data)
# RMSE for the GAM model
rmse_gam1 <- RMSE(pred_gam1, test_data$lsalary)
rmse_gam1
# Compare RMSE of all models
comparison <- tibble(
Model = c("Linear Regression", "LASSO Regression", "KNN", "GAM Model"),
RMSE = c(lm_rmse, lasso_rmse, RMSE_knn, rmse_gam1))
comparison
setwd("C:/Users/Bruker/OneDrive - Norwegian School of Economics/NHH/8. semester/BAN440/Term paper/BAN440---Term-Paper/Data/Vinmonopolet")
# relevant libraries
library(tidyverse)
library(readxl)
library(fastDummies)
library(knitr)
library(writexl)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Load data
Vinmonopolet <- read_excel("final_data_mun.xlsx") %>%
select(-c(Store_ID, Store_Status, Postal_Code, GPS_Coordinates, Poststed,
PostnummerKategoriKode, PostnummerKategori, Region_Code,
Municipality_Name)) %>%
mutate(
Municipality_Name = Mun_name,
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "AKERSHUS" ~ "Akershus",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "BUSKERUD" ~ "Buskerud",
Region_Name == "VESTFOLD" ~ "Vestfold",
Region_Name == "FINNMARK" ~ "Finnmark",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "MØRE OG ROMSDAL" ~ "Møre og Romsdal",
Region_Name == "NORDLAND" ~ "Nordland",
Region_Name == "OSLO" ~ "Oslo",
Region_Name == "ROGALAND" ~ "Rogaland",
Region_Name == "TELEMARK" ~ "Telemark",
Region_Name == "TROMS" ~ "Troms",
Region_Name == "SØR-TRØNDELAG" ~ "Trøndelag",
Region_Name == "NORD-TRØNDELAG" ~ "Trøndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
Region_Name == "ØSTFOLD" ~ "Østfold",
is.na(Region_Name) & str_starts(Municipality_Code, "03") ~ "Oslo",
is.na(Region_Name) & str_starts(Municipality_Code, "11") ~ "Rogaland",
is.na(Region_Name) & str_starts(Municipality_Code, "15") ~ "Møre og Romsdal",
is.na(Region_Name) & str_starts(Municipality_Code, "18") ~ "Nordland",
is.na(Region_Name) & str_starts(Municipality_Code, "31") ~ "Østfold",
is.na(Region_Name) & str_starts(Municipality_Code, "32") ~ "Akershus",
is.na(Region_Name) & str_starts(Municipality_Code, "33") ~ "Buskerud",
is.na(Region_Name) & str_starts(Municipality_Code, "34") ~ "Innlandet",
is.na(Region_Name) & str_starts(Municipality_Code, "39") ~ "Vestfold",
is.na(Region_Name) & str_starts(Municipality_Code, "40") ~ "Telemark",
is.na(Region_Name) & str_starts(Municipality_Code, "42") ~ "Agder",
is.na(Region_Name) & str_starts(Municipality_Code, "46") ~ "Vestland",
is.na(Region_Name) & str_starts(Municipality_Code, "50") ~ "Trøndelag",
is.na(Region_Name) & str_starts(Municipality_Code, "55") ~ "Troms",
is.na(Region_Name) & str_starts(Municipality_Code, "56") ~ "Finnmark",
TRUE ~ Region_Name  # Keep existing Region_Name if no conditions are met
)
)
# Aggregating per market data for the Bresnahan & Reiss model
Vinmonopolet_market <- Vinmonopolet %>%
group_by(Municipality_Code) %>%
summarise(
Mun_name = first(Municipality_Name),
Region_Name = first(Region_Name),
Population = first(Population),
Area = first(Area),
Number_of_stores = sum(`2024` > 0),  # Count non-zero sales
Sales = sum(`2024`)
)
# Now we have loaded the main data set that we thus far have used for estimating a model
# We saw the need for more data to be able to estimate the Bresnahan & Reiss model
## Merge 1: Grensehandel ######################################################
# Load the weights datas
weights <- read_excel("Grensehandel_weights.xlsx", skip = 3) %>%
slice(1) %>%
select(-'...1') %>%
mutate(
mean_weight = (as.numeric(`2024K1`) + as.numeric(`2024K2`) + as.numeric(`2024K3`) + as.numeric(`2024K4`)) / 4
)
weight_grensehandel <- weights$mean_weight / 100
# Load the regional data
regional <- read_excel("Grensehandel_regions.xlsx")
total_grensehandel <- sum(regional$"2024")
# Calculate grensehandel per region
regional <- regional %>%
rename(
Region = `Fylker`,
Total_sale = `2024`
) %>%
mutate(
Grensehandel = Total_sale * weight_grensehandel
)
# Split the "Vestlandet" region row into three new rows: "Rogaland", "Vestland" and "Møre og Romsdal"
regional <- regional %>%
rbind(
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Rogaland"),
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Vestland"),
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Møre og Romsdal")
) %>%
filter(Region != "Vestlandet")
# Divide the grensehandel value by three for "Rogaland", "Vestland" and "Møre og Romsdal"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Rogaland" ~ Grensehandel * 0.35,
Region == "Vestland" ~ Grensehandel * 0.46,
Region == "Møre og Romsdal" ~ Grensehandel * 0.19,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Split the "Nord-Norge" region row into three new rows: "Nordland", "Troms" and "Finnmark"
# And divide the grensehandel value by three
regional <- regional %>%
mutate(
Grensehandel = ifelse(Region == "Nord-Norge", Grensehandel / 3, Grensehandel)
) %>%
rbind(
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Nordland"),
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Troms"),
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Finnmark")
) %>%
filter(Region != "Nord-Norge")
# Divide the grensehandel value by three for "Nordland", "Troms" and "Finnmark"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Nordland" ~ Grensehandel * 0.5,
Region == "Troms" ~ Grensehandel * 0.35,
Region == "Finnmark" ~ Grensehandel * 0.15,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Split the "Agder, Telemark, Buskerud og Vestfold" column into four new columns: "Agder", "Telemark", "Buskerud" and "Vestfold"
# And divide the grensehandel value by four
regional <- regional %>%
mutate(
Grensehandel = ifelse(Region == "Agder, Telemark, Buskerud og Vestfold", Grensehandel / 4, Grensehandel)
) %>%
rbind(
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Agder"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Telemark"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Buskerud"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Vestfold")
) %>%
filter(Region != "Agder, Telemark, Buskerud og Vestfold")
# Divide the grensehandel value by four for "Agder", "Telemark", "Buskerud" and "Vestfold"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Agder" ~ Grensehandel * 0.31,
Region == "Telemark" ~ Grensehandel * 0.17,
Region == "Buskerud" ~ Grensehandel * 0.26,
Region == "Vestfold" ~ Grensehandel * 0.26,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Removing the "total_sale" column from the regional data set
regional <- regional %>% select(-Total_sale)
# Merge the regional data with the main data set on Region_Name in the Vinmonopolet_market data set and Region in the regional data set
Vinmonopolet_market <- left_join(Vinmonopolet_market, regional, by = c("Region_Name" = "Region"))
## Merge 2: Tourism ############################################################
# Reading tourism data
Tourism <- read_excel("Tourism.xlsx", skip = 4) %>%
rename(
Mun = '...1',
H = 'Hotell og liknande overnattingsbedrifter',
C = 'Campingplassar, hyttegrender og vandrarheim',
) %>%
select(-'...2') %>%
mutate_at(vars(H, C), ~as.numeric(str_replace_all(., ":", "0"))) %>%
mutate(n_stays = H + C) %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Mun", "H", "C", "Municipality_Name")) %>%
filter(!is.na(Municipality_Code))
# Merging the data
Vinmonopolet_market <- left_join(Vinmonopolet_market, Tourism, by = "Municipality_Code") %>%
mutate(
n_stays = ifelse(is.na(n_stays), 0, n_stays)
)
# There is a great deal of missing data, so we do not know the relevance of
# this data yet
## Merge 3: Income #############################################################
# Average monthly salary per inhabitant in the municipality
# Load data
data <- read_excel("Monthly_Salary.xlsx")
# Cleaning data by removing rows with missing values and rows with dots
clean_data <- data %>%
filter(!apply(., 1, function(row) any(grepl("\\.", row)))) %>%
na.omit()
# Remove the last two rows from the data, using tidyverse
clean_data <- clean_data %>%
slice(1:(n() - 2)) %>%
select(-'...2') %>%
rename(
Mun = `12852: Kommunefordelt månedslønn, etter region, statistikkmål, statistikkvariabel, år og arbeidssted/bosted`,
Monthly_salary = '...3'
) %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Municipality_Name", "Mun")) %>%
mutate(Monthly_salary = as.numeric(Monthly_salary))
# Merge with the main data set
Vinmonopolet_market <- left_join(Vinmonopolet_market, clean_data, by = "Municipality_Code")
## Some model testing #########################################################
# Filtering data for B&R
br_data <- Vinmonopolet_market %>%
filter(Population < 50000 & Area > 0 & Population > 0)
# Table of the number of stores per market
table(br_data$Number_of_stores)
# Adding variables to the data
upperb <- 2
br_data <- br_data %>%
mutate(
s = Population / 1000,
density = Number_of_stores / Area,
Number_of_stores = as.factor(ifelse(Number_of_stores <= upperb, Number_of_stores, upperb))
) %>%
dummy_cols(select_columns = "Number_of_stores") %>%
mutate_at(vars(starts_with("Number_of_stores")), as.factor)
# Scale all of the numerical variables
br_data <- br_data %>%
mutate_at(vars(s, density, Grensehandel, n_stays, Monthly_salary), scale)
str(br_data)
# Regression model to test
reg <- lm(as.numeric(Number_of_stores) ~ s, br_data)
summary(reg)
# Fitting the Bresnahan & Reiss model
library(MASS)
model_2 <- polr(Number_of_stores ~ s + Grensehandel
, data = br_data, method = "probit")
summary(model_2)
model_2 <- polr(Number_of_stores ~ s + Monthly_salary + Grensehandel + n_stays
, data = br_data, method = "probit")
summary(model_2)
model_2 <- polr(Number_of_stores ~ s + Monthly_salary
, data = br_data, method = "probit")
summary(model_2)
model_2 <- polr(Number_of_stores ~ s + Area
, data = br_data, method = "probit")
summary(model_2)
# relevant libraries
library(tidyverse)
library(readxl)
library(fastDummies)
library(knitr)
library(writexl)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Load data
Vinmonopolet <- read_excel("final_data_mun.xlsx") %>%
select(-c(Store_ID, Store_Status, Postal_Code, GPS_Coordinates, Poststed,
PostnummerKategoriKode, PostnummerKategori, Region_Code,
Municipality_Name)) %>%
mutate(
Municipality_Name = Mun_name,
Region_Name = case_when(
Region_Name == "AUST-AGDER" ~ "Agder",
Region_Name == "VEST-AGDER" ~ "Agder",
Region_Name == "AKERSHUS" ~ "Akershus",
Region_Name == "OPPLAND" ~ "Innlandet",
Region_Name == "BUSKERUD" ~ "Buskerud",
Region_Name == "VESTFOLD" ~ "Vestfold",
Region_Name == "FINNMARK" ~ "Finnmark",
Region_Name == "HEDMARK" ~ "Innlandet",
Region_Name == "MØRE OG ROMSDAL" ~ "Møre og Romsdal",
Region_Name == "NORDLAND" ~ "Nordland",
Region_Name == "OSLO" ~ "Oslo",
Region_Name == "ROGALAND" ~ "Rogaland",
Region_Name == "TELEMARK" ~ "Telemark",
Region_Name == "TROMS" ~ "Troms",
Region_Name == "SØR-TRØNDELAG" ~ "Trøndelag",
Region_Name == "NORD-TRØNDELAG" ~ "Trøndelag",
Region_Name == "SOGN OG FJORDANE" ~ "Vestland",
Region_Name == "HORDALAND" ~ "Vestland",
Region_Name == "ØSTFOLD" ~ "Østfold",
is.na(Region_Name) & str_starts(Municipality_Code, "03") ~ "Oslo",
is.na(Region_Name) & str_starts(Municipality_Code, "11") ~ "Rogaland",
is.na(Region_Name) & str_starts(Municipality_Code, "15") ~ "Møre og Romsdal",
is.na(Region_Name) & str_starts(Municipality_Code, "18") ~ "Nordland",
is.na(Region_Name) & str_starts(Municipality_Code, "31") ~ "Østfold",
is.na(Region_Name) & str_starts(Municipality_Code, "32") ~ "Akershus",
is.na(Region_Name) & str_starts(Municipality_Code, "33") ~ "Buskerud",
is.na(Region_Name) & str_starts(Municipality_Code, "34") ~ "Innlandet",
is.na(Region_Name) & str_starts(Municipality_Code, "39") ~ "Vestfold",
is.na(Region_Name) & str_starts(Municipality_Code, "40") ~ "Telemark",
is.na(Region_Name) & str_starts(Municipality_Code, "42") ~ "Agder",
is.na(Region_Name) & str_starts(Municipality_Code, "46") ~ "Vestland",
is.na(Region_Name) & str_starts(Municipality_Code, "50") ~ "Trøndelag",
is.na(Region_Name) & str_starts(Municipality_Code, "55") ~ "Troms",
is.na(Region_Name) & str_starts(Municipality_Code, "56") ~ "Finnmark",
TRUE ~ Region_Name  # Keep existing Region_Name if no conditions are met
)
)
# Aggregating per market data for the Bresnahan & Reiss model
Vinmonopolet_market <- Vinmonopolet %>%
group_by(Municipality_Code) %>%
summarise(
Mun_name = first(Municipality_Name),
Region_Name = first(Region_Name),
Population = first(Population),
Area = first(Area),
Number_of_stores = sum(`2024` > 0),  # Count non-zero sales
Sales = sum(`2024`)
)
# Now we have loaded the main data set that we thus far have used for estimating a model
# We saw the need for more data to be able to estimate the Bresnahan & Reiss model
## Merge 1: Grensehandel ######################################################
# Load the weights datas
weights <- read_excel("Grensehandel_weights.xlsx", skip = 3) %>%
slice(1) %>%
select(-'...1') %>%
mutate(
mean_weight = (as.numeric(`2024K1`) + as.numeric(`2024K2`) + as.numeric(`2024K3`) + as.numeric(`2024K4`)) / 4
)
weight_grensehandel <- weights$mean_weight / 100
# Load the regional data
regional <- read_excel("Grensehandel_regions.xlsx")
total_grensehandel <- sum(regional$"2024")
# Calculate grensehandel per region
regional <- regional %>%
rename(
Region = `Fylker`,
Total_sale = `2024`
) %>%
mutate(
Grensehandel = Total_sale * weight_grensehandel
)
# Split the "Vestlandet" region row into three new rows: "Rogaland", "Vestland" and "Møre og Romsdal"
regional <- regional %>%
rbind(
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Rogaland"),
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Vestland"),
regional %>% filter(Region == "Vestlandet") %>% mutate(Region = "Møre og Romsdal")
) %>%
filter(Region != "Vestlandet")
# Divide the grensehandel value by three for "Rogaland", "Vestland" and "Møre og Romsdal"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Rogaland" ~ Grensehandel * 0.35,
Region == "Vestland" ~ Grensehandel * 0.46,
Region == "Møre og Romsdal" ~ Grensehandel * 0.19,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Split the "Nord-Norge" region row into three new rows: "Nordland", "Troms" and "Finnmark"
# And divide the grensehandel value by three
regional <- regional %>%
mutate(
Grensehandel = ifelse(Region == "Nord-Norge", Grensehandel / 3, Grensehandel)
) %>%
rbind(
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Nordland"),
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Troms"),
regional %>% filter(Region == "Nord-Norge") %>% mutate(Region = "Finnmark")
) %>%
filter(Region != "Nord-Norge")
# Divide the grensehandel value by three for "Nordland", "Troms" and "Finnmark"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Nordland" ~ Grensehandel * 0.5,
Region == "Troms" ~ Grensehandel * 0.35,
Region == "Finnmark" ~ Grensehandel * 0.15,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Split the "Agder, Telemark, Buskerud og Vestfold" column into four new columns: "Agder", "Telemark", "Buskerud" and "Vestfold"
# And divide the grensehandel value by four
regional <- regional %>%
mutate(
Grensehandel = ifelse(Region == "Agder, Telemark, Buskerud og Vestfold", Grensehandel / 4, Grensehandel)
) %>%
rbind(
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Agder"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Telemark"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Buskerud"),
regional %>% filter(Region == "Agder, Telemark, Buskerud og Vestfold") %>% mutate(Region = "Vestfold")
) %>%
filter(Region != "Agder, Telemark, Buskerud og Vestfold")
# Divide the grensehandel value by four for "Agder", "Telemark", "Buskerud" and "Vestfold"
regional <- regional %>%
mutate(
Grensehandel = case_when(
Region == "Agder" ~ Grensehandel * 0.31,
Region == "Telemark" ~ Grensehandel * 0.17,
Region == "Buskerud" ~ Grensehandel * 0.26,
Region == "Vestfold" ~ Grensehandel * 0.26,
TRUE ~ Grensehandel  # Keep the original value for other regions
)
)
# Removing the "total_sale" column from the regional data set
regional <- regional %>% select(-Total_sale)
# Merge the regional data with the main data set on Region_Name in the Vinmonopolet_market data set and Region in the regional data set
Vinmonopolet_market <- left_join(Vinmonopolet_market, regional, by = c("Region_Name" = "Region"))
## Merge 2: Tourism ############################################################
# Reading tourism data
Tourism <- read_excel("Tourism.xlsx", skip = 4) %>%
rename(
Mun = '...1',
H = 'Hotell og liknande overnattingsbedrifter',
C = 'Campingplassar, hyttegrender og vandrarheim',
) %>%
select(-'...2') %>%
mutate_at(vars(H, C), ~as.numeric(str_replace_all(., ":", "0"))) %>%
mutate(n_stays = H + C) %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Mun", "H", "C", "Municipality_Name")) %>%
filter(!is.na(Municipality_Code))
# Merging the data
Vinmonopolet_market <- left_join(Vinmonopolet_market, Tourism, by = "Municipality_Code") %>%
mutate(
n_stays = ifelse(is.na(n_stays), 0, n_stays)
)
# There is a great deal of missing data, so we do not know the relevance of
# this data yet
## Merge 3: Income #############################################################
# Average monthly salary per inhabitant in the municipality
# Load data
data <- read_excel("Monthly_Salary.xlsx")
# Cleaning data by removing rows with missing values and rows with dots
clean_data <- data %>%
filter(!apply(., 1, function(row) any(grepl("\\.", row)))) %>%
na.omit()
# Remove the last two rows from the data, using tidyverse
clean_data <- clean_data %>%
slice(1:(n() - 2)) %>%
select(-'...2') %>%
rename(
Mun = `12852: Kommunefordelt månedslønn, etter region, statistikkmål, statistikkvariabel, år og arbeidssted/bosted`,
Monthly_salary = '...3'
) %>%
separate(Mun, into = c("Municipality_Code", "Municipality_Name"), sep = " ", remove = FALSE) %>%
select(-c("Municipality_Name", "Mun")) %>%
mutate(Monthly_salary = as.numeric(Monthly_salary))
# Merge with the main data set
Vinmonopolet_market <- left_join(Vinmonopolet_market, clean_data, by = "Municipality_Code")
## Some model testing #########################################################
# Filtering data for B&R
br_data <- Vinmonopolet_market %>%
filter(Population < 50000 & Area > 0 & Population > 0)
# Table of the number of stores per market
table(br_data$Number_of_stores)
# Adding variables to the data
upperb <- 2
br_data <- br_data %>%
mutate(
s = Population / 1000,
density = Number_of_stores / Area,
Number_of_stores = as.factor(ifelse(Number_of_stores <= upperb, Number_of_stores, upperb))
) %>%
dummy_cols(select_columns = "Number_of_stores") %>%
mutate_at(vars(starts_with("Number_of_stores")), as.factor)
# Scale all of the numerical variables
br_data <- br_data %>%
mutate_at(vars(s, density, Grensehandel, n_stays, Monthly_salary, Area), scale)
str(br_data)
# Regression model to test
reg <- lm(as.numeric(Number_of_stores) ~ s, br_data)
summary(reg)
# Fitting the Bresnahan & Reiss model
library(MASS)
model_2 <- polr(Number_of_stores ~ s + Area
, data = br_data, method = "probit")
summary(model_2)
model_2 <- polr(Number_of_stores ~ log(s) + Area + Grensehandel + n_stays + Monthly_salary
, data = br_data, method = "probit")
