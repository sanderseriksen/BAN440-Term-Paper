# Define data sets
x <- c(1, 2, 3, 4, 5)
y <- c(1.88, 4.54, 10.12, 9.14, 11.26)
# a) Prediction for x=3 with R as a calculator
f_hat <- a0 + a1 * x0
df <- as.data.frame(x + y)
View(df)
df <- as.data.frame(x, y)
# Define data sets
data.frame(
x = c(1, 2, 3, 4, 5),
y = c(1.88, 4.54, 10.12, 9.14, 11.26)
)
# Define data sets
df <- data.frame(
x = c(1, 2, 3, 4, 5),
y = c(1.88, 4.54, 10.12, 9.14, 11.26)
)
View(df)
# b) use lm function to fit the same model as in a)
reg1 <- lm(x ~ y, data = df)
View(reg1)
predict?
?predict
predict(reg1)
# a) Prediction for x=3 with R as a calculator
cumsum(df$x * df$y)
a1 <- ((5 * 134.18) - sum(df$x) * sum(df$y))/
5 * sum(df$x)^2 - sum(df$x)^2
a1 <- 2.336
a0 <- 0.38
f_hat <- a0 + a1 * 3
# b) use lm function to fit the same model as in a)
reg1 <- lm(y ~ x, data = df)
predict(reg1)
# K = 3
K3 <- mean(c(4.54, 10.12, 9.14))
# K = 1
K1 <- 10.12
# K = 5
K5 <- mean(df$y)
# d) KNN function in R
knn=function(x0,x,y,K=20)
{
d=abs(x-x0)
o=order(d)[1:K]
ypred=mean(y[o])
return(ypred)
}
knn(3, 3, 10.12, K = 3)
# d) KNN function in R
knn=function(x0,x,y,K)
{
d=abs(x-x0)
o=order(d)[1:K]
ypred=mean(y[o])
return(ypred)
}
knn(3, 3, 10.12, K = 3)
knn(3, 3, 10.12, 3)
knn(3, 1:5, 10.12, 3)
knn(3, df$x, df$y, 3)
install.packages(ISLR)
# Load library
library(ISLR)
install.packages("ISLR")
# Load library
library(ISLR)
College <- College
str(College)
summary(College)
# b) Divide the dataset into a 50/50 training and test data
set.seed(123)
n = nrow(College)
train_indicator = sample(1:n, size = floor(n/2))
train = College[train_indicator,]
test = College[-train_indicator,]
# c) Fit a linear model on the training data
m1 <- lm(Apps ~ Private + Accept, data = train)
summary(m1)
# d) Compute training MSE
pred_train <- predict(m1)
mse_train <- mean((train$Apps - pred_train)^2)
mse_train
m2=lm(Apps ~ Accept, data = train)
summary(m2)
pred_train2=predict(m2)
mse_train2 = mean((train$Apps-pred_train2)ˆ2)
mse_train2
pred_train2 = predict(m2)
mse_train2 = mean((train$Apps-pred_train2)ˆ2)
mse_train2
pred_train2 <- predict(m2)
mse_train2 <- mean((train$Apps-pred_train2)ˆ2)
mse_train2 <- mean((train$Apps-pred_train2)^2)
mse_train2
# f) Test-MSE for the two fitted models
pred_test=predict(m1,newdata = test)
mse_test=mean((test$Apps-pred_test)^2)
mse_test
pred_test2=predict(m2,newdata = test)
mse_test2=mean((test$Apps-pred_test2)^2)
mse_test2
install.packages("FNN")
library(FNN)
knn.reg(train = train, test = test, k = 3, algorithm = College$Apps)
?knn.reg
knn.reg(train = train, test = test, k = 3, algorithm = "Apps")
knn.reg(train = train, test = test, Apps, k = 3)
knn.reg(train = train, test = test, Apps, k = 3, algorithm = "kd_tree")
knn.reg(train = train, test = test, College$Apps, k = 3, algorithm = "kd_tree")
knn.reg(train = train, test = test, College$Apps, k = 3, algorithm = "brute")
install.packages("class")
library(class)
?class
plot(College$Apps, College$Accept)
plot(College$Accept, College$Accept)
x0 <- test$Accept
x <- train$Accept
y <- train$Apps
ntest <- nrow(test)
pred2_test <- matrix(0, ntest, 1)
for (i in 1:ntest) {
pred2_test[i] <- knn(x0[i], x, y, K = 3)
}
testMSE2 <- mean((test$Apps-pred2_test)^2)
testMSE2
update_geom_defaults()
install.packages("gtsummary")
library(tidyverse)
library(stargazer)
library(knitr)
library(lubridate)
library(gtsummary)
setwd("C:/Users/Sander Eriksen/OneDrive - Norwegian School of Economics/NHH/8. semester/BAN440/Term paper/BAN440---Term-Paper/Data/Vinmonopolet")
### Vinmonopolet data wrangling ###
# Importing libraries
library(tidyverse)
library(readxl)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Define the path to your Excel file
file_path <- "Vinmonopolet_2024.xlsx"
# Get the names of all sheets in the Excel file
sheet_names <- excel_sheets(file_path)
# Read each sheet into a list of data frames, skipping the first row
list_of_dfs <- lapply(sheet_names, function(sheet) {
read_excel(file_path, sheet = sheet, skip = 2)
})
# Combine all data frames into a single data frame
combined_data <- bind_rows(list_of_dfs)
# View the combined data frame
print(combined_data)
# Unique values in the first column
unique_values <- unique(combined_data$...1)
print(unique_values)
# Transforming to normal characters
combined_data$...1 <- iconv(combined_data$...1, from = "UTF-8", to = "ASCII//TRANSLIT")
combined_data$...1 <- trimws(combined_data$...1)
# Define the values to filter out
values_to_exclude <- c(
"Svakvin", "Rodvin", "Hvitvin", "Musserende vin", "Rosevin",
"Perlende vin", "Aromatisert vin", "Sider", "Fruktvin",
"Brennevin", "Vodka", "Likor", "Whisky", "Akevitt",
"Brennevin, annet", "Gin", "Druebrennevin",
"Brennevin, noytralt < 37,5 %", "Rom", "Bitter",
"Fruktbrennevin", "Genever", "Ol", "Alkoholfritt", "Sterkvin", "Totalsum",
"eLager"
)
# Column names of combined data
colnames(combined_data)
# Filter out the specified values from the first column
filtered_data <- combined_data %>%
mutate("2024" = as.numeric(`2024`),
"Store" = as.character(`...1`)) %>%
filter(!.[[1]] %in% values_to_exclude) %>%
select("Store", "2024")
# View the filtered data
print(filtered_data)
install.packages(writexl)
install.packages("writexl")
library(writexl)
# Export the filtered data to an Excel file
write_xlsx(filtered_data, "filtered_data.xlsx")
View(filtered_data)
# Importing libraries
library(tidyverse)
library(readxl)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Define file path as "Data/Kommunedata
file_path <- "Data/Kommunedata"
# Read the "Kommune_matched" file from the defined file path
kommune_data <- read_excel(file_path, sheet = "Stores")
setwd("C:/Users/Sander Eriksen/OneDrive - Norwegian School of Economics/NHH/8. semester/BAN440/Term paper/BAN440---Term-Paper")
# Define file path as "Data/Kommunedata
file_path <- "Data/Kommunedata"
# Read the "Kommune_matched" file from the defined file path
kommune_data <- read_excel(file_path, sheet = "Stores")
rm(file_path)
setwd("C:/Users/Sander Eriksen/OneDrive - Norwegian School of Economics/NHH/8. semester/BAN440/Term paper/BAN440---Term-Paper/Data/Kommunedata")
# Read the "Kommune_matched" file from the defined file path
kommune_data <- read_excel("Kommune_matched.xlsx", sheet = "Stores")
# Read the "Kommune_matched" file from the defined file path
kommune_data <- read_excel("Kommune_matched.xlsx", sheet = "Stores")
View(kommune_data)
# Pivot the "Store" column longer
# Function to split each entry in the 'Store' column
split_store <- function(store_entry) {
# Extract names and numbers
extracted_data <- str_extract_all(store_entry, "[A-Za-z]+|\\d+")
# Create a data frame from the extracted data
tibble(
name = extracted_data[[1]][seq(1, length(extracted_data[[1]]), by = 2)],
number = extracted_data[[1]][seq(2, length(extracted_data[[1]]), by = 2)]
)
}
# Apply the function to each row in the 'Store' column and unnest the results
result <- kommune_data %>%
rowwise() %>%
do(split_store(.$Store)) %>%
ungroup()
# Function to split each entry in the 'Store' column
split_store <- function(store_entry) {
# Extract names and numbers
extracted_data <- str_extract_all(store_entry, "[A-Za-z]+|\\d+")
# Separate names and numbers
names <- extracted_data[[1]][seq(1, length(extracted_data[[1]]), by = 2)]
numbers <- extracted_data[[1]][seq(2, length(extracted_data[[1]]), by = 2)]
# Ensure the lengths match by trimming the longer one
min_length <- min(length(names), length(numbers))
names <- names[1:min_length]
numbers <- numbers[1:min_length]
# Create a data frame from the extracted data
tibble(
name = names,
number = numbers
)
}
# Apply the function to each row in the 'Store' column and unnest the results
result <- kommune_data %>%
rowwise() %>%
do(split_store(.$Store)) %>%
ungroup()
View(result)
# Function to separate characters and numbers
split_char_num <- function(x) {
chars <- str_extract(x, "[A-Za-z]+")
nums <- str_extract(x, "[0-9]+")
return(c(chars, nums))
}
# Read the "Kommune_matched" file from the defined file path
kommune_data <- read_excel("Kommune_matched.xlsx", sheet = "Stores")
# Function to separate characters and numbers
split_char_num <- function(x) {
chars <- str_extract(x, "[A-Za-z]+")
nums <- str_extract(x, "[0-9]+")
return(c(chars, nums))
}
# Apply the function and create new columns
kommune_data <- kommune_data %>%
rowwise() %>%
mutate(
chars = split_char_num(mixed_column)[1],
nums = split_char_num(mixed_column)[2]
) %>%
ungroup()
# Function to separate characters and numbers
split_char_num <- function(x) {
chars <- str_extract(x, "[A-Za-z]+")
nums <- str_extract(x, "[0-9]+")
return(c(chars, nums))
}
# Apply the function and create new columns
kommune_data <- kommune_data %>%
rowwise() %>%
mutate(
chars = split_char_num(Store)[1],
nums = split_char_num(Store)[2]
) %>%
ungroup()
View(kommune_data)
install.packages("stringr")
library(stringr)
# Function to separate characters and numbers
split_char_num <- function(x) {
# Extract all character sequences
chars <- str_extract_all(x, "[A-Za-z]+")[[1]]
# Extract all numeric sequences
nums <- str_extract_all(x, "[0-9]+")[[1]]
return(list(chars = chars, nums = nums))
}
# Apply the function and create new columns
df <- df %>%
rowwise() %>%
mutate(
split_data = list(split_char_num(Store))
) %>%
unnest_wider(split_data) %>%
unnest(cols = c(chars, nums))
library(tidyverse)
library(readxl)
library(stringr)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Read the "Kommune_matched" file from the defined file path
kommune_data <- read_excel("Kommune_matched.xlsx", sheet = "Stores")
# Function to separate characters and numbers
split_char_num <- function(x) {
# Extract all character sequences
chars <- str_extract_all(x, "[A-Za-z]+")[[1]]
# Extract all numeric sequences
nums <- str_extract_all(x, "[0-9]+")[[1]]
return(list(chars = chars, nums = nums))
}
# Apply the function and create new columns
df <- df %>%
rowwise() %>%
mutate(
split_data = list(split_char_num(Store))
) %>%
unnest_wider(split_data) %>%
unnest(cols = c(chars, nums))
# Function to separate characters and numbers
split_char_num <- function(x) {
# Extract all character sequences
chars <- str_extract_all(x, "[A-Za-z]+")[[1]]
# Extract all numeric sequences
nums <- str_extract_all(x, "[0-9]+")[[1]]
return(list(chars = chars, nums = nums))
}
# Apply the function and create new columns
kommune_data <- kommune_data %>%
mutate(split_data = map(Store, split_char_num)) %>%
unnest_wider(split_data) %>%
unnest(cols = c(chars, nums))
# Read the "Kommune_matched" file from the defined file path
kommune_data <- read_excel("Kommune_matched.xlsx", sheet = "Store")
View(kommune_data)
# Number of unique observations for each value in the "Kommune" column
kommune_data %>%
group_by(Kommune) %>%
summarise(n = n()) %>%
arrange(desc(n))
# Number of unique observations for each value in the "Kommune" column
kommune_data %>%
group_by(Region) %>%
summarise(n = n()) %>%
arrange(desc(n))
### Vinmonopolet data wrangling ###
# Importing libraries
library(tidyverse)
library(readxl)
library(writexl)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Define the path to your Excel file
file_path <- "Vinmonopolet_2024.xlsx"
# Get the names of all sheets in the Excel file
sheet_names <- excel_sheets(file_path)
setwd("C:/Users/Sander Eriksen/OneDrive - Norwegian School of Economics/NHH/8. semester/BAN440/Term paper/BAN440---Term-Paper/Data/Vinmonopolet")
### Vinmonopolet data wrangling ###
# Importing libraries
library(tidyverse)
library(readxl)
library(writexl)
# Set locale to UTF-8
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Define the path to your Excel file
file_path <- "Vinmonopolet_2024.xlsx"
# Get the names of all sheets in the Excel file
sheet_names <- excel_sheets(file_path)
# Read each sheet into a list of data frames, skipping the first row
list_of_dfs <- lapply(sheet_names, function(sheet) {
read_excel(file_path, sheet = sheet, skip = 2)
})
# Combine all data frames into a single data frame
combined_data <- bind_rows(list_of_dfs)
# View the combined data frame
print(combined_data)
# Unique values in the first column
unique_values <- unique(combined_data$...1)
print(unique_values)
# Transforming to normal characters
combined_data$...1 <- iconv(combined_data$...1, from = "UTF-8", to = "ASCII//TRANSLIT")
combined_data$...1 <- trimws(combined_data$...1)
# Define the values to filter out
values_to_exclude <- c(
"Svakvin", "Rodvin", "Hvitvin", "Musserende vin", "Rosevin",
"Perlende vin", "Aromatisert vin", "Sider", "Fruktvin",
"Brennevin", "Vodka", "Likor", "Whisky", "Akevitt",
"Brennevin, annet", "Gin", "Druebrennevin",
"Brennevin, noytralt < 37,5 %", "Rom", "Bitter",
"Fruktbrennevin", "Genever", "Ol", "Alkoholfritt", "Sterkvin", "Totalsum",
"eLager"
)
# Column names of combined data
colnames(combined_data)
# Filter out the specified values from the first column
filtered_data <- combined_data %>%
mutate("2024" = as.numeric(`2024`),
"Store" = as.character(`...1`)) %>%
filter(!.[[1]] %in% values_to_exclude) %>%
select("Store", "2024")
View(filtered_data)
filtered_data %>%
group_by(Region) %>%
summarise(n = n()) %>%
arrange(desc(n))
