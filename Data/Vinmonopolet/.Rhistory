print(paste("Minimum RMSE:", knn_results$min_rmse))
# Train final KNN model with best K
final_knn <- knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$lsalary, k = knn_results$best_k)
# Evaluate performance
final_rmse <- sqrt(mean((final_knn$pred - test_data$lsalary)^2))
print(paste("Final Model RMSE:", final_rmse))
library(ggplot2)
# Generate RMSE plot for different K values
k_values <- 1:20
rmse_values <- sapply(k_values, function(k) {
knn_model <- knn.reg(train = train_data_norm[, -1], test = test_data_norm[, -1], y = train_data_norm$lsalary, k = k)
sqrt(mean((knn_model$pred - test_data_norm$lsalary)^2))
})
# Normalize predictors
normalize <- function(x) (x - min(x)) / (max(x) - min(x))
ceosal2_norm <- as.data.frame(lapply(ceosal2[, c("sales", "profits", "ceoten", "mktval")], normalize))
ceosal2_norm$lsalary <- ceosal2$lsalary  # Keeping target variable unchanged
# Split into train and test sets
set.seed(123)
train_indices <- sample(1:nrow(ceosal2_norm), 0.8 * nrow(ceosal2_norm))
train_data <- ceosal2_norm[train_indices, ]
test_data <- ceosal2_norm[-train_indices, ]
# Function to find the best K value
find_best_k <- function(train_x, train_y, test_x, test_y, max_k = 20) {
rmse_values <- numeric(max_k)
for (k in 1:max_k) {
knn_model <- knn.reg(train = train_x, test = test_x, y = train_y, k = k)
rmse_values[k] <- sqrt(mean((knn_model$pred - test_y)^2))
}
best_k <- which.min(rmse_values)
return(list(best_k = best_k, min_rmse = rmse_values[best_k], rmse_values = rmse_values))
}
# Apply function to normalized data
knn_results <- find_best_k(train_data[, -1], train_data$lsalary, test_data[, -1], test_data$lsalary, max_k = 20)
# Print best K and RMSE
print(paste("Best K:", knn_results$best_k))
print(paste("Minimum RMSE:", knn_results$min_rmse))
# Train final KNN model with best K
final_knn <- knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$lsalary, k = knn_results$best_k)
# Evaluate performance
final_rmse <- sqrt(mean((final_knn$pred - test_data$lsalary)^2))
print(paste("Final Model RMSE:", final_rmse))
library(ggplot2)
# Generate RMSE plot for different K values
k_values <- 1:20
rmse_values <- sapply(k_values, function(k) {
knn_model <- knn.reg(train = train_data[, -1], test = test_data_norm[, -1], y = train_data_norm$lsalary, k = k)
sqrt(mean((knn_model$pred - test_data_norm$lsalary)^2))
})
library(ggplot2)
# Generate RMSE plot for different K values
k_values <- 1:20
rmse_values <- sapply(k_values, function(k) {
knn_model <- knn.reg(train = train_data[, -1], test = test_data_norm[, -1], y = train_data$lsalary, k = k)
sqrt(mean((knn_model$pred - test_data_norm$lsalary)^2))
})
library(ggplot2)
# Generate RMSE plot for different K values
k_values <- 1:20
rmse_values <- sapply(k_values, function(k) {
knn_model <- knn.reg(train = train_data[, -1], test = test_data[, -1], y = train_data$lsalary, k = k)
sqrt(mean((knn_model$pred - test_data$lsalary)^2))
})
# Plot RMSE vs K
ggplot(data.frame(k_values, rmse_values), aes(x = k_values, y = rmse_values)) +
geom_line() + geom_point() +
labs(title = "K vs RMSE", x = "Number of Neighbors (K)", y = "RMSE") +
theme_minimal()
library(readxl)
library(dplyr)
library(tidyr)
library(openxlsx)
library(stringr)
# Filstier
final_data_path <- "final_data_18.xlsx"
kommunesammenslaainger_path <- "Kommunesammenslaainger.xlsx"
# Lese inn data
final_data <- read_excel(final_data_path)
setwd("C:/Users/oyaod/OneDrive/Skrivebord/Spring_2025/Ban440/Eksamen/BAN440-Term-Paper/BAN440-Term-Paper/Data/Vinmonopolet")
library(readxl)
library(dplyr)
library(tidyr)
library(openxlsx)
library(stringr)
# Filstier
final_data_path <- "final_data_18.xlsx"
kommunesammenslaainger_path <- "Kommunesammenslaainger.xlsx"
# Lese inn data
final_data <- read_excel(final_data_path)
kommunesammenslaainger <- read_excel(kommunesammenslaainger_path)
# Skriv ut kolonnenavn for ?? kontrollere strukturen
cat("Kolonnenavn i kommunesammensl??inger:\n")
print(colnames(kommunesammenslaainger))
# Rengj??ring av sammensl??ingsdata
kommunesammenslaainger <- kommunesammenslaainger %>%
mutate(ny_kode = sub(" - .*$", "", as.character(`43831`)),
ny_navn = sub("^[0-9]+ - ", "", as.character(`43831`)))
# H??ndtering av gamle kommunekoder
kommunesammenslaainger <- kommunesammenslaainger %>%
rowwise() %>%
mutate(gamle_koder = list(str_extract_all(as.character(`43466`), "[0-9]+ - [^0-9]+")[[1]])) %>%
unnest(gamle_koder) %>%
mutate(gammel_kode = sub(" - .*$", "", gamle_koder))
# Lage en mapping mellom gamle og nye kommuner
mapping <- kommunesammenslaainger %>%
select(gammel_kode, ny_kode, ny_navn) %>%
distinct()
# Oppdatere kommunekoder og -navn i final_data
final_data <- final_data %>%
left_join(mapping, by = c("Municipality_Code" = "gammel_kode")) %>%
mutate(Municipality_Code = ifelse(is.na(ny_kode), Municipality_Code, ny_kode),
Municipality_Name = ifelse(is.na(ny_navn), Municipality_Name, ny_navn)) %>%
select(-ny_kode, -ny_navn)
# Lagre oppdatert data
write.xlsx(final_data, output_path)
cat("Oppdateringen er fullf??rt. Fil lagret som final_data_20.xlsx.")
library(readxl)
library(dplyr)
library(tidyr)
library(openxlsx)
library(stringr)
# Filstier
final_data_path <- "final_data_18.xlsx"
kommunesammenslaainger_path <- "Kommunesammenslaainger.xlsx"
# Lese inn data
final_data <- read_excel(final_data_path)
kommunesammenslaainger <- read_excel(kommunesammenslaainger_path)
# Skriv ut kolonnenavn for ?? kontrollere strukturen
cat("Kolonnenavn i kommunesammensl??inger:\n")
print(colnames(kommunesammenslaainger))
# Rengj??ring av sammensl??ingsdata
kommunesammenslaainger <- kommunesammenslaainger %>%
mutate(ny_kode = sub(" - .*$", "", as.character(`43831`)),
ny_navn = sub("^[0-9]+ - ", "", as.character(`43831`)))
# H??ndtering av gamle kommunekoder
kommunesammenslaainger <- kommunesammenslaainger %>%
rowwise() %>%
mutate(gamle_koder = list(str_extract_all(as.character(`43466`), "[0-9]+ - [^0-9]+")[[1]])) %>%
unnest(gamle_koder) %>%
mutate(gammel_kode = sub(" - .*$", "", gamle_koder))
# Lage en mapping mellom gamle og nye kommuner
mapping <- kommunesammenslaainger %>%
select(gammel_kode, ny_kode, ny_navn) %>%
distinct()
# Oppdatere kommunekoder og -navn i final_data
final_data <- final_data %>%
left_join(mapping, by = c("Municipality_Code" = "gammel_kode")) %>%
mutate(Municipality_Code = ifelse(is.na(ny_kode), Municipality_Code, ny_kode),
Municipality_Name = ifelse(is.na(ny_navn), Municipality_Name, ny_navn)) %>%
select(-ny_kode, -ny_navn)
# Lagre oppdatert data
write.xlsx(final_data)
cat("Oppdateringen er fullf??rt. Fil lagret som final_data_20.xlsx.")
library(readxl)
library(dplyr)
library(tidyr)
library(openxlsx)
library(stringr)
# Filstier
final_data_path <- "final_data_18.xlsx"
kommunesammenslaainger_path <- "Kommunesammenslaainger.xlsx"
# Lese inn data
final_data <- read_excel(final_data_path)
kommunesammenslaainger <- read_excel(kommunesammenslaainger_path)
# Skriv ut kolonnenavn for ?? kontrollere strukturen
cat("Kolonnenavn i kommunesammensl??inger:\n")
print(colnames(kommunesammenslaainger))
# Rengj??ring av sammensl??ingsdata
kommunesammenslaainger <- kommunesammenslaainger %>%
mutate(ny_kode = sub(" - .*$", "", as.character(`43831`)),
ny_navn = sub("^[0-9]+ - ", "", as.character(`43831`)))
# H??ndtering av gamle kommunekoder
kommunesammenslaainger <- kommunesammenslaainger %>%
rowwise() %>%
mutate(gamle_koder = list(str_extract_all(as.character(`43466`), "[0-9]+ - [^0-9]+")[[1]])) %>%
unnest(gamle_koder) %>%
mutate(gammel_kode = sub(" - .*$", "", gamle_koder))
# Lage en mapping mellom gamle og nye kommuner
mapping <- kommunesammenslaainger %>%
select(gammel_kode, ny_kode, ny_navn) %>%
distinct()
# Oppdatere kommunekoder og -navn i final_data
final_data <- final_data %>%
left_join(mapping, by = c("Municipality_Code" = "gammel_kode")) %>%
mutate(Municipality_Code = ifelse(is.na(ny_kode), Municipality_Code, ny_kode),
Municipality_Name = ifelse(is.na(ny_navn), Municipality_Name, ny_navn)) %>%
select(-ny_kode, -ny_navn)
# Lagre oppdatert data
write.xlsx(final_data, "final_data_20.xlsx.")
# Laste inn n??dvendige pakker
library(readxl)
library(dplyr)
library(stringr)
library(openxlsx)
# Laste inn kommuneendringer og oppdatert final data fra Excel
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
oppdatert_final_data_df <- read_excel("final_data_20.xlsx")
# Gi passende kolonnenavn til kommuneendringer_df
colnames(kommuneendringer_df) <- c("New_Municipality", "Old_Municipality")
# Funksjon for ?? fjerne spesialtegn og ekstra mellomrom fra kommunenavn
clean_name <- function(name) {
name <- str_replace_all(name, "[^[:alnum:][:space:]]", "") # Fjern spesialtegn
name <- str_trim(name) # Fjern ledende og etterf??lgende mellomrom
return(name)
}
# Ekstraher kommunenummer og kommunenavn fra begge kolonner og rengj??r navnene
kommuneendringer_df <- kommuneendringer_df %>%
mutate(
New_Code = str_extract(New_Municipality, "\\d+"),
New_Name = clean_name(str_extract(New_Municipality, "-\\s*(.*)")),
Old_Code = str_extract(Old_Municipality, "\\d+"),
Old_Name = clean_name(str_extract(Old_Municipality, "-\\s*(.*)"))
)
# Fjerne mellomrom fra kommunenavn i oppdatert_final_data_df
oppdatert_final_data_df <- oppdatert_final_data_df %>%
mutate(Municipality_Name = clean_name(Municipality_Name))
# Fjerne duplikater i kommuneendringer_df basert p?? Old_Name, beholde siste rad
kommuneendringer_df <- kommuneendringer_df %>%
group_by(Old_Name) %>%
slice_tail(n = 1) %>%
ungroup()
# Sl?? sammen dataene basert p?? rensede kommunenavn
merged_df <- oppdatert_final_data_df %>%
left_join(kommuneendringer_df %>% select(Old_Name, New_Code),
by = c("Municipality_Name" = "Old_Name")) %>%
mutate(Municipality_Code = ifelse(!is.na(New_Code), New_Code, Municipality_Code)) %>%
select(-New_Code)
# Lagre den oppdaterte dataen i en ny Excel-fil
write.xlsx(merged_df, "oppdatert_final_data_oppdatert.xlsx")
print("Oppdateringen er fullf??rt, og filen er lagret som 'oppdatert_final_data_oppdatert.xlsx'")
print("Oppdateringen er fullf??rt, og filen er lagret som 'final_data_24.xlsx'")
# Laste inn n??dvendige pakker
library(readxl)
library(dplyr)
library(stringr)
library(openxlsx)
# Laste inn kommuneendringer og oppdatert final data fra Excel
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
oppdatert_final_data_df <- read_excel("final_data_20.xlsx")
# Gi passende kolonnenavn til kommuneendringer_df
colnames(kommuneendringer_df) <- c("New_Municipality", "Old_Municipality")
# Funksjon for ?? fjerne spesialtegn og ekstra mellomrom fra kommunenavn
clean_name <- function(name) {
name <- str_replace_all(name, "[^[:alnum:][:space:]]", "") # Fjern spesialtegn
name <- str_trim(name) # Fjern ledende og etterf??lgende mellomrom
return(name)
}
# Ekstraher kommunenummer og kommunenavn fra begge kolonner og rengj??r navnene
kommuneendringer_df <- kommuneendringer_df %>%
mutate(
New_Code = str_extract(New_Municipality, "\\d+"),
New_Name = clean_name(str_extract(New_Municipality, "-\\s*(.*)")),
Old_Code = str_extract(Old_Municipality, "\\d+"),
Old_Name = clean_name(str_extract(Old_Municipality, "-\\s*(.*)"))
)
# Fjerne mellomrom fra kommunenavn i oppdatert_final_data_df
oppdatert_final_data_df <- oppdatert_final_data_df %>%
mutate(Municipality_Name = clean_name(Municipality_Name))
# Fjerne duplikater i kommuneendringer_df basert p?? Old_Name, beholde siste rad
kommuneendringer_df <- kommuneendringer_df %>%
group_by(Old_Name) %>%
slice_tail(n = 1) %>%
ungroup()
# Sl?? sammen dataene basert p?? rensede kommunenavn
merged_df <- oppdatert_final_data_df %>%
left_join(kommuneendringer_df %>% select(Old_Name, New_Code),
by = c("Municipality_Name" = "Old_Name")) %>%
mutate(Municipality_Code = ifelse(!is.na(New_Code), New_Code, Municipality_Code)) %>%
select(-New_Code)
# Lagre den oppdaterte dataen i en ny Excel-fil
write.xlsx(merged_df, "oppdatert_final_data_oppdatert.xlsx")
print("Oppdateringen er fullf??rt, og filen er lagret som 'final_data_24.xlsx'")
# Laste inn n??dvendige pakker
library(readxl)
library(dplyr)
library(stringr)
library(openxlsx)
# Laste inn kommuneendringer og oppdatert final data fra Excel
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
oppdatert_final_data_df <- read_excel("final_data_20.xlsx")
# Gi passende kolonnenavn til kommuneendringer_df
colnames(kommuneendringer_df) <- c("New_Municipality", "Old_Municipality")
# Funksjon for ?? fjerne spesialtegn og ekstra mellomrom fra kommunenavn
clean_name <- function(name) {
name <- str_replace_all(name, "[^[:alnum:][:space:]]", "") # Fjern spesialtegn
name <- str_trim(name) # Fjern ledende og etterf??lgende mellomrom
return(name)
}
# Ekstraher kommunenummer og kommunenavn fra begge kolonner og rengj??r navnene
kommuneendringer_df <- kommuneendringer_df %>%
mutate(
New_Code = str_extract(New_Municipality, "\\d+"),
New_Name = clean_name(str_extract(New_Municipality, "-\\s*(.*)")),
Old_Code = str_extract(Old_Municipality, "\\d+"),
Old_Name = clean_name(str_extract(Old_Municipality, "-\\s*(.*)"))
)
# Fjerne mellomrom fra kommunenavn i oppdatert_final_data_df
oppdatert_final_data_df <- oppdatert_final_data_df %>%
mutate(Municipality_Name = clean_name(Municipality_Name))
# Fjerne duplikater i kommuneendringer_df basert p?? Old_Name, beholde siste rad
kommuneendringer_df <- kommuneendringer_df %>%
group_by(Old_Name) %>%
slice_tail(n = 1) %>%
ungroup()
# Sl?? sammen dataene basert p?? rensede kommunenavn
merged_df <- oppdatert_final_data_df %>%
left_join(kommuneendringer_df %>% select(Old_Name, New_Code),
by = c("Municipality_Name" = "Old_Name")) %>%
mutate(Municipality_Code = ifelse(!is.na(New_Code), New_Code, Municipality_Code)) %>%
select(-New_Code)
# Lagre den oppdaterte dataen i en ny Excel-fil
write.xlsx(merged_df, "oppdatert_final_data_oppdatert.xlsx")
print("Oppdateringen er fullf??rt, og filen er lagret som 'final_data_24.xlsx'")
# Laste inn n??dvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_2018.xlsx")
# Rydde opp i kolonnenavnene ved ?? bruke de riktige kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte gamle kommunenummer (dersom flere gamle kommuner er adskilt med mellomrom)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Lage en oppslagsliste for gamle koder til nye koder (ensidig mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Oppdatere kommune-koder i data_df
data_df$Municipality_Code <- sapply(data_df$Municipality_Code, function(x) {
if (x %in% names(kommune_mapping)) {
new_code <- kommune_mapping[[x]]
# S??rg for at kun de f??rste 4 sifrene beholdes
return(substr(new_code, 1, 4))
} else {
return(x)  # Behold gamle verdier hvis ikke funnet
}
})
# Lagre den oppdaterte filen
write_xlsx(data_df, "final_18.xlsx")
# Laste inn n??dvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_2018.xlsx")
# Rydde opp i kolonnenavnene ved ?? bruke de riktige kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte gamle kommunenummer (dersom flere gamle kommuner er adskilt med mellomrom)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Lage en oppslagsliste for gamle koder til nye koder (ensidig mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Oppdatere kommune-koder i data_df
data_df$Municipality_Code <- sapply(data_df$Municipality_Code, function(x) {
if (x %in% names(kommune_mapping)) {
new_code <- kommune_mapping[[x]]
# S??rg for at kun de f??rste 4 sifrene beholdes
return(substr(new_code, 1, 4))
} else {
return(x)  # Behold gamle verdier hvis ikke funnet
}
})
# Lagre den oppdaterte filen
write_xlsx(data_df, "final_18_data.xlsx")
# Laste inn n??dvendige biblioteker
library(readxl)
library(dplyr)
library(stringr)
library(writexl)
# Lese inn data fra Excel-filer
data_df <- read_excel("final_data.xlsx")
kommuneendringer_df <- read_excel("Kommuneendringer_2018.xlsx")
# Rydde opp i kolonnenavnene ved ?? bruke de riktige kolonnenavnene
colnames(kommuneendringer_df) <- c("New_Code", "Old_Codes")
# Splitte gamle kommunenummer (dersom flere gamle kommuner er adskilt med mellomrom)
kommuneendringer_df$Old_Codes <- str_split(kommuneendringer_df$Old_Codes, " ")
# Lage en oppslagsliste for gamle koder til nye koder (ensidig mapping)
kommune_mapping <- setNames(rep(kommuneendringer_df$New_Code, times = sapply(kommuneendringer_df$Old_Codes, length)),
unlist(kommuneendringer_df$Old_Codes))
# Oppdatere kommune-koder i data_df
data_df$Municipality_Code <- sapply(data_df$Municipality_Code, function(x) {
if (x %in% names(kommune_mapping)) {
new_code <- kommune_mapping[[x]]
# S??rg for at kun de f??rste 4 sifrene beholdes
return(substr(new_code, 1, 4))
} else {
return(x)  # Behold gamle verdier hvis ikke funnet
}
})
# Lagre den oppdaterte filen
write_xlsx(data_df, "final_data_18.xlsx")
library(readxl)
library(dplyr)
library(tidyr)
library(openxlsx)
library(stringr)
# Filstier
final_data_path <- "final_data_18.xlsx"
kommunesammenslaainger_path <- "Kommunesammenslaainger.xlsx"
# Lese inn data
final_data <- read_excel(final_data_path)
kommunesammenslaainger <- read_excel(kommunesammenslaainger_path)
# Skriv ut kolonnenavn for ?? kontrollere strukturen
cat("Kolonnenavn i kommunesammensl??inger:\n")
print(colnames(kommunesammenslaainger))
# Rengj??ring av sammensl??ingsdata
kommunesammenslaainger <- kommunesammenslaainger %>%
mutate(ny_kode = sub(" - .*$", "", as.character(`43831`)),
ny_navn = sub("^[0-9]+ - ", "", as.character(`43831`)))
# H??ndtering av gamle kommunekoder
kommunesammenslaainger <- kommunesammenslaainger %>%
rowwise() %>%
mutate(gamle_koder = list(str_extract_all(as.character(`43466`), "[0-9]+ - [^0-9]+")[[1]])) %>%
unnest(gamle_koder) %>%
mutate(gammel_kode = sub(" - .*$", "", gamle_koder))
# Lage en mapping mellom gamle og nye kommuner
mapping <- kommunesammenslaainger %>%
select(gammel_kode, ny_kode, ny_navn) %>%
distinct()
# Oppdatere kommunekoder og -navn i final_data
final_data <- final_data %>%
left_join(mapping, by = c("Municipality_Code" = "gammel_kode")) %>%
mutate(Municipality_Code = ifelse(is.na(ny_kode), Municipality_Code, ny_kode),
Municipality_Name = ifelse(is.na(ny_navn), Municipality_Name, ny_navn)) %>%
select(-ny_kode, -ny_navn)
# Lagre oppdatert data
write.xlsx(final_data, "final_data_20.xlsx.")
# Laste inn n??dvendige pakker
library(readxl)
library(dplyr)
library(stringr)
library(openxlsx)
# Laste inn kommuneendringer og oppdatert final data fra Excel
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
oppdatert_final_data_df <- read_excel("final_data_20.xlsx")
# Gi passende kolonnenavn til kommuneendringer_df
colnames(kommuneendringer_df) <- c("New_Municipality", "Old_Municipality")
# Funksjon for ?? fjerne spesialtegn og ekstra mellomrom fra kommunenavn
clean_name <- function(name) {
name <- str_replace_all(name, "[^[:alnum:][:space:]]", "") # Fjern spesialtegn
name <- str_trim(name) # Fjern ledende og etterf??lgende mellomrom
return(name)
}
# Ekstraher kommunenummer og kommunenavn fra begge kolonner og rengj??r navnene
kommuneendringer_df <- kommuneendringer_df %>%
mutate(
New_Code = str_extract(New_Municipality, "\\d+"),
New_Name = clean_name(str_extract(New_Municipality, "-\\s*(.*)")),
Old_Code = str_extract(Old_Municipality, "\\d+"),
Old_Name = clean_name(str_extract(Old_Municipality, "-\\s*(.*)"))
)
# Fjerne mellomrom fra kommunenavn i oppdatert_final_data_df
oppdatert_final_data_df <- oppdatert_final_data_df %>%
mutate(Municipality_Name = clean_name(Municipality_Name))
# Fjerne duplikater i kommuneendringer_df basert p?? Old_Name, beholde siste rad
kommuneendringer_df <- kommuneendringer_df %>%
group_by(Old_Name) %>%
slice_tail(n = 1) %>%
ungroup()
# Sl?? sammen dataene basert p?? rensede kommunenavn
merged_df <- oppdatert_final_data_df %>%
left_join(kommuneendringer_df %>% select(Old_Name, New_Code),
by = c("Municipality_Name" = "Old_Name")) %>%
mutate(Municipality_Code = ifelse(!is.na(New_Code), New_Code, Municipality_Code)) %>%
select(-New_Code)
# Lagre den oppdaterte dataen i en ny Excel-fil
write.xlsx(merged_df, "oppdatert_final_data_oppdatert.xlsx")
print("Oppdateringen er fullf??rt, og filen er lagret som 'final_data_24.xlsx'")
# Laste inn n??dvendige pakker
library(readxl)
library(dplyr)
library(stringr)
library(openxlsx)
# Laste inn kommuneendringer og oppdatert final data fra Excel
kommuneendringer_df <- read_excel("Kommuneendringer_24.xlsx")
oppdatert_final_data_df <- read_excel("final_data_20.xlsx")
# Gi passende kolonnenavn til kommuneendringer_df
colnames(kommuneendringer_df) <- c("New_Municipality", "Old_Municipality")
# Funksjon for ?? fjerne spesialtegn og ekstra mellomrom fra kommunenavn
clean_name <- function(name) {
name <- str_replace_all(name, "[^[:alnum:][:space:]]", "") # Fjern spesialtegn
name <- str_trim(name) # Fjern ledende og etterf??lgende mellomrom
return(name)
}
# Ekstraher kommunenummer og kommunenavn fra begge kolonner og rengj??r navnene
kommuneendringer_df <- kommuneendringer_df %>%
mutate(
New_Code = str_extract(New_Municipality, "\\d+"),
New_Name = clean_name(str_extract(New_Municipality, "-\\s*(.*)")),
Old_Code = str_extract(Old_Municipality, "\\d+"),
Old_Name = clean_name(str_extract(Old_Municipality, "-\\s*(.*)"))
)
# Fjerne mellomrom fra kommunenavn i oppdatert_final_data_df
oppdatert_final_data_df <- oppdatert_final_data_df %>%
mutate(Municipality_Name = clean_name(Municipality_Name))
# Fjerne duplikater i kommuneendringer_df basert p?? Old_Name, beholde siste rad
kommuneendringer_df <- kommuneendringer_df %>%
group_by(Old_Name) %>%
slice_tail(n = 1) %>%
ungroup()
# Sl?? sammen dataene basert p?? rensede kommunenavn
merged_df <- oppdatert_final_data_df %>%
left_join(kommuneendringer_df %>% select(Old_Name, New_Code),
by = c("Municipality_Name" = "Old_Name")) %>%
mutate(Municipality_Code = ifelse(!is.na(New_Code), New_Code, Municipality_Code)) %>%
select(-New_Code)
# Lagre den oppdaterte dataen i en ny Excel-fil
write.xlsx(merged_df, "final_data_24.xlsx")
print("Oppdateringen er fullf??rt, og filen er lagret som 'final_data_24.xlsx'")
